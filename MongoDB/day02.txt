一、query更多的筛选用法

1.操作符 ： 使用$符号注明的一个特殊字符串，表达一定的含义，比如 $lt 表示小于

2.比较操作符:
  ①$eq  等于 == 
      e.g.查找年龄等于18
      db.class0.find({age:{$eq:18}},{_id:0})
      ==》db.class0.find({age:18},{_id:0})
  ②$lt  小于  < 
      e.g.查找年龄小于18的
      db.class0.find({age:{$lt:18}},{_id:0})
      db.class0.find({name:{$lt:"John"}},{_id:0})  *在mongodb中字符串可以比较大小
  ③$lte  小于等于  <= 
      e.g.年龄小于等于18 
      db.class0.find({age:{$lte:18}},{_id:0})
  ④$gt  大于  >
      e.g.查找年龄大于16 且 小于19
      db.class0.find({age:{$gt:16,$lt:19}},{_id:0}) *在mongodb中所有的{} [] 中都可以写多个条件。但根据参数的不同表达的意思不一样
  ⑤$gte 大于等于 >= 
      e.g.大于等于19
      db.class0.find({age:{$gte:19}},{_id:0})
  ⑥$ne  不等于  !=
      e.g.性别不等于‘m’的 
      db.class0.find({sex:{$ne:'m'}},{_id:0})        *使用ne查找也会找到该域不存在的文档
  ⑦$in  包含
      e.g.找到年龄为 [10,20,30]
      db.class0.find({age:{$in:[10,20,30]}},{_id:0})
  ⑧$nin 不包含
      e.g.找到年龄不是 17、18、19 的
      db.class0.find({age:{$nin:[17,18,19]}},{_id:0})

3.逻辑操作符：
  ①. 在 query 如果写多个条件默认即为 and 关系
      e.g.
      db.class0.find({age:{$lt:18},sex:'m'},{_id:0})
  ②. 逻辑与 $and
      e.g. 年龄小于18并且 性别为男
      db.class0.find({$and:[{age:{$lt:18}},{sex:'m'}]},{_id:0})
  ③. 逻辑或 $or  
      e.g. 年龄小于16或者年龄大于18
      db.class0.find({$or:[{age:{$lte:16}},{age:{$gt:18}}]},{_id:0})
  ④. 逻辑非 $not  
      e.g.  查找年龄不小于18岁的
      db.class0.find({age:{$not:{$lt:18}}},{_id:0})
  ⑤. $nor   not  (a or b)  ===> (not a) and (not b)
      e.g.  性别不是m且年龄不小于18
      db.class0.find({$nor:[{sex:'m'},{age:{$lt:18}}]},{_id:0})

4.逻辑条件混合：
  ①.（年龄大于17 并且 为男生）  或者 姓名叫 Abby
      db.class0.find({$or:[{age:{$gt:17},sex:'m'},{name:'Abby'}]},{_id:0})
  ②.（年龄不大于18 或者为 女性） 并且 姓名 大于Lucy
      db.class0.find({$or:[{age:{$not:{$gt:18}}},{sex:'w'}],name:{$gt:'Lucy'}},{_id:0})







二、Array类型查询
[1,2,3,4]
* 数组是有序的数据集合
* 数组中数据类型可以不相同

①.查找数组中包含某一条件的元素
  e.g.  只要score数组中包含小于60的元素即可查询过滤文档
  db.class1.find({score:{$lt:60}},{_id:0})

②.$all
  查找数组同时包含多项的文档
  e.g.  查找同时包含49  67的文档
  db.class1.find({score:{$all:[49,67]}},{_id:0})
  
③.$size
  通过数组元素个数查找 
  e.g. 查找score中包含两个元素的文档
  db.class1.find({score:{$size:2}},{_id:0})

④.$slice
  显示数组中指定项，用于field参数
  e.g.  显示数组前两项
  db.class1.find({},{_id:0,score:{$slice:2}})
  e.g. 跳过数组的第一项显示后面2项
  db.class1.find({},{_id:0,score:{$slice:[1,2]}})

⑤.$exists
  通过某个域是否存在筛选（true表示存在false表示不存在）
  e.g. 查找不存在sex域的文档
  db.class1.find({sex:{$exists:false}},{_id:0})

⑥.$mod 
  通过除数余数查找筛选文档
  e.g. 找出年龄为单数的文档
  db.class1.find({age:{$mod:[2,1]}},{_id:0})

⑦.$type
  找出指定数据类型的文档
  e.g. 查找name域值类型为2的文档
  db.class1.find({name:{$type:2}},{_id:0})
  db.class1.find({score:{$type:1}},{_id:0})   注意：
  db.class1.find({score:{$type:4}},{_id:0})   如果数组为[1,2,3]显示空值：应指定的是表示数组内的元素的类型

  *mongo数据类型和数字的对照参看文档：www.mongodb.com下的docs文档查找新的操作符使用方法
   double 1
   string 2
   object 3
   array  4










三、查找结果的操作函数（数据处理函数）
①.db.collection.distinct(field)
   功能： 查看某个域的值范围
   e.g.  获取class0中age域的数值范围，去重
   db.class0.distinct('age')
   #[18,17,16,19]

②.pretty()
   功能：将find查找结果格式化显示
   e.g.
   db.class0.find().pretty()

③.limit(n)
   功能：限制显示前n条结果
   e.g. 显示查询结果前三条
   db.class0.find({},{_id:0}).limit(3)

④.skip(n)
   功能： 跳过前n条文档显示后面的内容
   e.g.  跳过前5条文档，显示后面的查询结果
   db.class0.find({},{_id:0}).skip(5)

⑤.count()
   功能 ： 统计查询结果数量
   * 在统计数量时要给出一定query条件
   e.g.  统计性别为w的文档个数
   db.class0.find({sex:'w'},{_id:0}).count()

⑥.sort({field: 1/-1})
   功能： 对查找结果排序
   参数： 以键值对表示按照哪个field排序
         1 表示升序，-1表示降序
   e.g.  查找结果按照降序排序
   db.class0.find({},{_id:0}).sort({age:-1})

⑦.复合排序：对多个域进行排序，当第一排序项相同时，参考第二排序项排序，以此类推
   e.g. 按照年龄升序排序，年龄相同时按照姓名降序
   db.class0.find({},{_id:0}).sort({age:1,name:-1})

⑧.函数的连续调用：当一个函数的返回结果仍然是文档集合，可以继续调用函数
   e.g.查找年龄最大的三位同学的文档信息
   db.class0.find({},{_id:0}).sort({age:-1}).limit(3)
   *对筛选的文档集合，可以使用索引序号来获取文档，序列号从0开始
   e.g.通过序列号1取到筛选结果的第二项
   db.class1.find()[1]









四、删除文档
mysql ： delete from table where ... 
mongodb ： ↓

①db.collection.deleteOne(query)
功能：删除符合条件的第一个文档
参数：query，用法同find

②db.collection.deleteMany(query)
功能：删除所有符合条件的文档
参数：query，用法同find
 *如果筛选条件为空，则删除结合中所有文档
 *db.collection.deleteMany()

③db.collection.remove(query,justOne)
功能 ： 删除文档
参数 ： query，用法同find 
       justOne--布尔值--默认为false表示删除所有符合条件的文档-->deleteMany
                       设置为true则表示只删除一条-->deleteOne
.e.g. 删除所有不存在sex域的文档
       db.class1.remove({sex:{$exists:false}})
.e.g. 删除第一条性别为w的文档
       db.class1.remove({sex:'w'},true)
.e.g. 删除class1中所有文档
        db.class1.remove({})

④db.collection.findOneAndDelete(query)
功能：查找某个文档并删除
参数：query，用法同find
返回：显示查找到的文档








练习：
1. 创建数据 名称 grade
   use  grade
2. 创建集合 名称 class   
3. 集合中插入若干（5-8条即可）文档 文档格式
{name:'zhangsan',age:10,sex:'m',hobby:['a','b']}
 年龄范围 6-15
 爱好选择：draw  sing  dance  basketball  football  pingpong  computer 每个同学选择2-5项
   db.class.insert({name:'zhangsan',age:10,sex:'m',hobby:['draw','sing']})
4. 查找练习
 查看班级所有学生信息
   find()
 查看班级中年龄为8岁的学生信息
   find({age:8})
 查看班级中年龄大于10岁学生信息
   find({age:{$gt:10}})
 查看班级中年龄在8-11岁之间的学生信息
   find({age:{$gte:8,$lte:11}})
 查看班级中年龄10岁且为男生的学生信息
   find({age:10,sex:'m'})
 查看班级中小于7岁或者大于14岁的学生
   find({$or:[{age:{$lt:7}},{age:{$gt:14}}]})
 查看班级中年龄为8岁或者11岁的学生
   find({age:{$in:[8,11]}})
 找到有2项兴趣爱好的学生
   find({hobby:{$size:2}})
 找到兴趣中 有draw的学生
   find({hobby:'draw'})
 找到既喜欢画画又喜欢跳舞的学生
   find({hobby:{$all:['draw','dance']}})
 统计兴趣有4项的学生人数
   find({hobby:{$size:4}}).count()
 找出本班年龄第二大的学生
   find().sort({age:-1}).skip(1).limit(1)
 查看本班学生兴趣爱好涵盖哪些方面
   db.class.distinct('hobby')
 找到年龄最大的三个学生
   find().sort({age:-1}).limit(3)
 删除所有年龄大于16或者小于7岁的学生除非他的爱好有三项以上
   remove({$or:[{age:{$gt:16}},{age:{$lt:7}}],{hobby:{$size:2}}})
  








五、修改文档
mysql ： update table set ... where ...
mongodb: db.collection.update(query,update,upsert,multi)

①update(query,update,upsert,multi)
功能 ： 修改文档
参数 ： query   筛选条件，用法同find
       update  要修改成什么内容 通常配合修改操作符（修改器）使用
	     upsert  布尔值，默认是false  如果query没有筛选到文档则不做任何操作
               如果设置为true 则如果query没有筛选到匹配文档则根据query和update内容插入新的文档
	     multi   布尔值 默认false 表示如果有多条符合条件文档则只修改第一条--->updateOne
	             如果设置为true则表示修改所有符合条件文档------------------>updateMany

e.g.  将Tom的年龄修改为18
      db.class0.update({name:'Tom'},{$set:{age:18}})
e.g.  如果有name=Jame的文档则修改，如果没有则根据query update插入新的文档
      db.class0.update({name:'Jame'},{$set:{age:15}},true)
e.g.  修改所有年龄小于17的为18
      db.class0.update({age:{$lt:17}},{$set:{age:18}},false,true)

②db.collection.findOneAndUpdate(query,update)
功能：查找一个文档并修改
参数：query 查找条件
     update 修改内容
返回：修改前的文档内容
e.g.  将jim的年龄修改为17并显示jim修改前的文档
      db.class0.findOneAndUpdate({name:Jame},{$set:{age:17}})

③db.collection.findOneAndReplace(query,document)
功能：根据条件查找并替换符合条件的一条文档，也会返回原有文档内容
参数：query 查找条件
     document 要替换的文档
返回：原有文档内容
e.g.  用新的文档替换查找到的文档
      db.class0.findOneAndReplace({abc:123},{name:'Lily',age:'17'})







作业 ： 
1.练习查找操作
2.练习删除和修改操作
3.将三国改为mongo版，按照mysql课上练习进行增删改查操作
