一."multiprocessing模块"创建进程
   1. 需要将要执行的事情封装为函数
   2. 使用multiprocessing模块中Process类创建进程对象
   3. 通过对象属性设置和Process的初始化函数对进程进行设置，绑定要执行的函数
   4. 启动进程，会自动执行进程绑定的函数
   5. 完成进程的回收

二."multiprocessing模块"中的Process类：

     import multipeocessing as mp
   1.Process()
     功能:创建进程对象
     参数:name--进程名称--Process-1
     　　 target--绑定函数 
     　　 args--元组--给target函数按照位置传参
     　　 kwargs--字典--给target函数按照键值对传参

     p=mp.Process()
   2.p.start()
     功能：启动进程
     * target函数会自动执行，此时进程真正被创建

   3.p.join([timeout])
     功能：阻塞等待回收子进程
     参数：超时时间
     说明：
       * 使用multiprocessing创建子进程，同样子进程复制父进程的全部空间代码段，父子进程各自执行互不影响，父子进程有各自的运行空间
       * 如果不使用join回收子进程则子进程退出后会成为僵尸进程
       * 使用multiprocessing创建子进程往往父进程只是用来管理创建进程回收进程，具体事件由子进程完成
   4.Process进程对象属性:
     p.start()
     p.join()
     p.is_alive()  判断进程生命周期状态，处于生命周期得到True否则返回False
     p.name 进程名称 默认为Process-1
     p.pid  进程的PID号
     p.daemon 默认状态False  主进程退出不会影响子进程执行
              如果设置为True 则子进程会随着主进程结束而结束
              要在start前设置，一般不和join一起使用
---------------------------------------示例:process1.py--------------------------------------------
import multiprocessing as mp 
from time import sleep 

#编写进程函数
def fun():
    sleep(3)
    global a
    print('a=',a)
    a=10000
    print('子进程事件')
a=1
#创建进程对象
p=mp.Process(target=fun)

#启动进程
p.start()

sleep(2)
print('父进程事件')
#回收进程
p.join()
print('parent a=',a) 
---------------------------------------示例:process2.py--------------------------------------------
from  multiprocessing import Process 
from time import sleep 
import os
def th1():
    sleep(3)
    print('吃饭')
    print(os.getppid(),'--',os.getpid())

def th2():
    sleep(5)
    print('睡觉')
    print(os.getppid(),'--',os.getpid())

def th3():
    sleep(4)
    print('打豆豆')
    print(os.getppid(),'--',os.getpid())

things=[th1,th2,th3]
process=[]
for th in things:
    p=Process(target=th)
    process.append(p)#保留每次创建的进程对象
    p.start()

for i in process:
    i.join()
------------------------------------示例：process3.py(传参)-------------------------------------------------------------
from  multiprocessing import Process 
from time import sleep 
import os
#带参数的进程函数
def worker(sec,name):
    for i in range(3):
        sleep(sec)
        print('I am %s'%name)
        print('I am workong...')
# p=Process(target=worker,args=(2,'Levis'))
p=Process(target=worker,kwargs={'sec':2,'name':'Levis'})

p.start()
p.join(4)
print('===================') 
-------------------------------------示例：Process进程对象属性使用--------------------------
from  multiprocessing import Process 
from time import sleep,ctime
def tm():
    for i in range(4):
        sleep(2)
        print(ctime(),end='\r')
p=Process(target=tm,name='Tarena')
p.daemon=True#要在start之前设置,一般不会和p.join一起使用
p.start()
print('Pcocess name:',p.name,'/Process PID:',p.pid,'/Process status',p.is_alive(),sep='')
# p.join()
--------------------------------------------------------------------------------------------

三、创建自定义进程类
  1. 继承Process
  2. 编写自己的__init__ 添加自己的属性,同时使用super重新加载父类init方法
  3. 重写run方法
  4.使用自己的类创建进程对象
  5.调用start启动程序，此时会自动执行run方法
  6.调用join()回收进程
------------------示例：创建自定义进程-------------------------
from  multiprocessing import Process 
from time import sleep,ctime
class ClockProcess(Process):
    def __init__(self,value):
        self.value=value
        super().__init__()#加载父类的init
    def run(self):
        for i in range(5):
            print('The time is{}'.format(ctime())) 
            sleep(self.value)
p=ClockProcess(2)
p.start()#会自动运行run方法
p.join()
----------------------------------------------------------  
四、多进程的优缺点：
  优点：可以使用计算机多核，进行任务的并发执行，提高执行效率
       空间独立，数据安全
  	   运行不受其他进程影响，创建方便
  缺点：进程的创建和删除消耗的系统资源较多


五、进程池技术
  *产生原因：如果有大量任务需要多进程完成，则可能需要频繁的创建删除进程，给计算机带来较多的资源消耗。
  *原理：创建一定量的的进程放入进程池，用来处理待处理事件，处理完毕后进程不销毁，仍然在进程池中等待处理其他事件，直到所有待处理事件结束再统一销毁进程，进程的复用降低了资源的消耗
  *使用方法：
    1. 创建进程池，在池内放入适当的进程
    2. 将事件加入到进程池等待队列
    3. 不断取进程执行事件，直到所有事件执行完毕
    4. 关闭进程池，回收进程

from multiprocessing import Pool

pool=Pool(processes)
  功能：创建进程池对象
  参数：表示进程池中有多少个进程，默认根据系统自动判定

r=pool.apply_async(func,args,kwds)
  功能：将事件放入到进程池队列
  参数：func 事件函数
       args 以元组形式给func传参
  	   kwds 以字典形式给func传参
  返回值：返回一个代表进程池事件的对象

pool.close()
  功能：关闭进程池,不能再添加新的事件

pool.join()
  功能：阻塞等待回收进程池进程

pool.map(func,iter)
  功能：将要做的事件放入进程池
  参数：func  要执行的函数
       iter  迭代对象
  返回值：返回事件函数的返回值列表
-----------------------示例：进程池使用-----------------------------------------
from  multiprocessing import Pool 
from time import sleep,ctime 
def worker(msg):
    sleep(2)
    print(msg)
    return ctime()
#创建一个进程池
pool=Pool(10)
result=[]
#向进程池添加事件
for i in range(10):
    msg='hello %d'%i 
    #异步执行方式
    r=pool.apply_async(func=worker,args=(msg,))
    result.append(r)#存储函数事件对象
    #同步执行方式
    # pool.apply(func=worker,args=(msg,))#（效率较低，一个一个执行）

#关闭进程池
pool.close()
#回收进程池
pool.join()
for i in result:
    print(i.get())#可以获取进程事件函数的返回值
------------------------------示例：pool.map使用-----------------------------------------
from  multiprocessing import Pool 
from time import sleep,ctime 
def fun(n):
    sleep(1)
    return n*n
#创建一个进程池
pool=Pool()

r=pool.map(fun,[1,2,3,4,5])

#关闭进程池
pool.close()
#回收进程池
pool.join()
print(r)
-------------------------------------------------------------------------
六、进程间通信 （IPC）

*原因：进程空间相对独立，资源无法相互获取，此时在不同进程间通信需要专门方法进行通信。
*进程间通信方法：管道/消息队列/共享内存/信号/信号量/套接字

①管道通信  Pipe
通信原理：在内存中开辟管道空间，生成管道操作对象，多个进程使用"同一个"管道对象进行操作即可实现通信
from multiprocessing import Pipe
  1.fd1,fd2 = Pipe(duplex = True)
    功能：创建管道
    参数：默认表示双向管道
         如果设置为False则为单向管道
    返回值：表示管道的两端
    　　　　如果是双向管道 都可以读写
    　　　　如果是单向管道 则fd1只读 fd2只写
  2.fd1.recv()
    功能：从管道读取信息
    返回值： 读取到的内容
    * 如果管道为空则阻塞
  3.fd2.send(data)
    功能:向管道写入内容
    参数:要写入的数据
    * 可以发送python数据类型
-------------------------示例：子进程放消息，父进程取消息-------------------------------------------------------
from multiprocessing import Process, Pipe
import os
import time
# 创建管道对象，如果为单向管道，fd1只能调用recv,fd2只能调用send
fd1, fd2 = Pipe()
def fun(name):
    time.sleep(3)
    # 向管道写入内容
    fd1.send(name)
jobs = []
for i in range(5):
    p = Process(target=fun, args=(i,))
    jobs.append(p)
    p.start()
for i in range(5):
    data = fd2.recv()
    print(data)
for i in jobs:
    i.join()
-------------------------------------------------------------------------------------
②消息队列：
*队列：先进先出
*通信原理：在内存中建立队列数据结构模型。进程通过队列对象将数据存入模型，取出数据的顺序和存入顺序保持一致
from multipeocessing import Queue 
1.创建队列对象：
  q = Queue(maxsize = 0)
  功能：创建消息队列
  参数：表示最多存放多少消息。默认表示根据内存分配存储
  返回值：队列对象
2.向队列存放数据：
  q.put(data,[block,timeout])
  功能: 向队列存储消息
  参数:data 要存的内容 python数据
  　　 block 默认队列满时会阻塞，设置为False则非阻塞
  　　 timeout 超时检测
3.从队列中取出数据：
  data = q.get([block,timeout])
  功能：获取队列消息
  参数：block 默认队列空时会阻塞，设置为False则非阻塞
       timeout 超时时间
  返回值：返回取出的内容
4.队列对象的方法：
  q.full()   判断队列是否为满
  q.empty()  判断队列是否为空
  q.qsize()  判断队列中消息数量
  q.close()  关闭队列
------------------------示例：队列对象方法使用----------------------------------------
from multiprocessing import Queue 
#创建消息队列
q=queue(3)

q.put(1)
sleep(0.1)
print(q.empty())#False
q.put(2)
q.put(3)
print(q.full())#True
print(q.get())#先进先出,取出1条#1
print(q.qsize())#2
q.close()#关闭队列
----------------------------示例：消息队列使用---------------------------------------
from multiprocessing import Queue,Process 
import time
#创建消息队列
q=Queue()

def fun1():
    for i in range(10):
        time.sleep(1)
        q.put((1,2))
def fun2():
    for i in range(10):
        time.sleep(1.5)
        a,b=q.get()
        print('sum=',a+b)
p1=Process(target=fun1)
p2=Process(target=fun2)
p1.start()
p2.start()
p1.join()
p2.join()
-------------------------------------------------------------------------

作业：
1.整理multipeocessing创建进程的方法，和fork比较优劣
2.回顾网络项目聊天室、tcp、udp通信、httpserver、整理http协议
3.复习mysql内容