一、事务和事务回滚
  1、定义 ：一件事从开始发生到结束的整个过程
  2、作用 ：确保数据一致性
  3、事务和事务回滚应用
    1、SQL命令会 autocommit 到数据库执行(show variables like 'autocommit')
    2、事务操作
      1、开启事务
          mysql> begin;(或者start transactions;)
          mysql> SQL命令 ... 
	      ## 此时autocommit被禁用 ##
      2、终止事务
          mysql> commit;(或者rollback;)
    3、案例
      1、背景
          你 ：建行卡
	      朋友 ：工行卡
	      你在建行自动取款机 给你朋友 转5000块钱
      2、建表
          表1、CCB
          create table CCB(
	      name varchar(20),
	      money decimal(20,2)
	      );
	      insert into CCB values("有钱人",100000);
	      表2、ICBC
	      create table ICBC(
	      name varchar(20),
	      money decimal(20,2)
	      );
	      insert into ICBC values("没钱人",0);
      3、开始转账
	      成功：
          mysql> begin;
	      mysql> update CCB set money=money-5000 where name="有钱人";
	      mysql> update ICBC set money=money+5000 where name="没钱人";
	      mysql> commit;
	      #####转账成功#####
  
	      失败 ：
	      mysql> begin;
	      mysql> update CCB set money=money-5000 where name="有钱人";
	      mysql> update ICBC set 工行服务器故障... ;
	      mysql> rollback;
	      #####转账失败#####
      4、注意：
          事务只针对于表记录的操作（增删改）。对库和表操作无效


二、数据库与Python交互
  1、交互类型
    1、python3
      模块名 ：pymysql
      安装 ：
        1、在线:      sudo pip3 install pymysql==0.7.11
        　 安装pip3$: sudo apt-get install python3-pip
	    2、离线:      pymysql-0.7.11.tar.gz
        　 解压$:     tar -xzvf pymysql-0.7.11.tar.gz
           $:        cd pymysql-0.7.11
           $:        python3 setup.py install 
    2、python2
      模块名 ：MySQLdb
      安装 ：sudo pip install mysql-python

  2、pymysql使用流程
    1、建立数据库连接对象(db = pymysql.connect(host='localhost',user='root',password='123456',database='db5',charset='utf8')
    2、创建游标对象cur(操作数据库的对象)cur=db.cursor()
    3、游标对象:cur.execute("insert into sheng ...;")
    4、提交到数据库执行 ：db.commit()
    5、关闭游标对象cur.close()
    6、关闭数据库连接对象db.close()

  3、connect连接对象
    1、db = pymysql.connect(参数列表)
      1、host ：主机地址
      2、user ：用户名
      3、password ：密码
      4、database ：库
      5、charset ：编码方式,推荐utf8
      6、port ：端口(3306)
    2、db (数据库连接对象) 的方法
      1、db.close() ：断开连接
      2、db.commit() ：提交到数据库执行
      3、db.cursor() ：游标对象,用来执行SQL命令
      4、db.rollback() ：回滚
    3、cur=db.cursor 游标对象 的方法
      1、cur.execute(SQL命令) ：执行SQL命令
      2、cur.close() ：关闭游标对象
      3、cur.fetchone() ：获取查询结果的第1条数据
      4、cur.fetchmany(n) ：获取n条数据
      5、cur.fetchall() ：获取所有数据
      ## fetchmany(n) 和 fetchall() 得到的结果一定是一个大元组套着小元组 ((),(),())

>>>>>
>>>>>
>>>>>
>>>>>
>>>>>
>>>>>数据库与python交互的示例1：
----------------------------------------------------------------------------------
#在db5库中的t1表插入一条记录(4,'王维',80)
import pymysql
#1.创建数据库的连接对象
db = pymysql.connect(host='localhost',user='root',password='123456',database='db5',charset='utf8')
#2.创建游标对象(利用数据库的对象)
cursor=db.cursor()
#3.执行mysql命令(利用创建的游标对象)
cursor.execute('insert into t1 values (4,"王维",80);')
#4.提交到数据库执行(commit())
db.commit()
print('-----INSERT INTO T1-------OK------------')
#5.关闭游标对象
cursor.close()
#6.关闭数据库连接对象
db.close()
----------------------------------------------------------------------------------

>>>>>
>>>>>
>>>>>
>>>>>
>>>>>
>>>>>数据库与python交互的示例2：
-----------------------------------------------------------------------------------
import pymysql
#在t1表中增加一条记录
#在t1表中把李白的成绩改为100分
#在t1表中删除一条记录
db=pymysql.connect(host='localhost',user='root',password='123456',database='db5',charset='utf8')
cur=db.cursor()
try:
  cur.execute('insert into t1 values (null,"骆宾王",97);')
  cur.execute('update t1 set score=100 where name="王勃";')
  cur.execute('delete from t1 where id=2;')
  cur.execute('select * from t1;')
  print(cur.fetchone(),cur.fetchmany(2),cur.fetchall(),sep='\n')
        #取走第一条记录　取走剩下的前２条记录　取走剩下的记录
  db.commit()
  print('执行结束')
except Exception as e:
  db.rollback()
  print('执行失败',e)
cur.close()
db.close()
-----------------------------------------------------------------------------------------
>>>>>
>>>>>
>>>>>
>>>>>
>>>>>
>>>>>数据库与python交互的示例3：SQL语句参数化：
-----------------------------------------------------------------------------------------
import pymysql
db=pymysql.connect(host='localhost',user='root',password='123456',database='db5',charset='utf8')
cur=db.cursor()

while True:
  c=input('按q退出,按回车输入学生信息:')
  if c.strip().lower()=='q':
    break
  name=input('请输入姓名')
  score=input('请输入成绩')
  #execute(sql,列表)
  try:
    cur.execute('insert into t1(name,score) values(%s,%s)',[name,score])
    #cur.execute('insert into t1(name,score) values("%s","%s")' % (name,score))此方法也可实现，不推荐
    db.commit()
    print('OK')
  except Exception as  e:
    db.rollback()
    print('Failed',e)
cur.close()
db.close()
-----------------------------------------------------------------------------------------
>>>>>
>>>>>
>>>>>
>>>>>
>>>>>数据库与python交互的示例4：通过类封装数据库命令语句

①在mysqlpython.py里面创建类Mysqlpython来封装MySQL命令
----------------------------------------------------------------------------------------
from pymysql import *
class Mysqlpython:
    def __init__(self, database, host='localhost', user='root', password='123456', charset='utf8', port=3306):
        self.database = database
        self.host = host
        self.user = user
        self.password = password
        self.charset = charset
        self.port = port
    def open(self):
        self.db = connect(host=self.host, user=self.user, password=self.password,
                          database=self.database, charset=self.charset, port=self.port)
        self.cur = self.db.cursor()
    def close(self):
        self.cur.close()
        self.db.close()
    def zhixing(self, sql, L=[]):
        self.open()
        self.cur.execute(sql, L)
        self.db.commit()
        self.close()
    def get_select(self, sql, L=[]):
        self.open()
        self.cur.execute(sql,L)
        return self.cur.fetchall()
if __name__ =='__main__':
    sqlh = Mysqlpython('db5')
    sqlh.zhixing('update t1 set score=120 where name="小姐姐"')
    r = sqlh.get_select('select * from t1')
    print(r)
----------------------------------------------------------------------------------------
②引用在mysqlpython.py里面的类Mysqlpython来执行MySQL命令：
----------------------------------------------------------------------------------------
from mysqlpython import Mysqlpython
sqlh=Mysqlpython()
sqlh.zhixing('delete from t1 where name="小姐姐"')
print(sqlh.get_select('select * from t1'))
-----------------------------------------------------------------------------------------
>>>>>
>>>>>
>>>>>
>>>>>
>>>>>
>>>>>数据库与python交互的示例5：引用类Mysqlpython模拟用户登录提示程序(数据库db5,用户账号密码(sha1加密)表user)
-----------------------------------------------------------------------------------------
from mysqlpython import Mysqlpython
from hashlib import sha1
# 接收用户输入的用户名和密码
username = input('请输入用户名:')
password = input('请输入密码:')
# 把用户输入的密码sha1加密
s1 = sha1()  # 创建一个sha1加密对象
s1.update(password.encode('utf8'))  # encode:把sha1加密代码转换为二进制数字
password2 = s1.hexdigest()  # 返回16进制加密结果
# 两个密码作对比
sqlh = Mysqlpython('db5')
sel = 'select password from user where username=%s'
r = sqlh.get_select(sel, [username])
# print(r)#(('7c4a8d09ca3762af61e59520943dc26494f8941b',),)
if len(r) == 0:
    print('用户名不存在!')
elif password2 == r[0][0]:
    print('登录成功!')
else:
    print('密码错误')
-----------------------------------------------------------------------------------------

三、orm(Object Relation Mapping) 对象关系映射
  1、定义：把对象的模型映射到MySQL数据库中
  2、sqlalchemy安装
  　在线：sudo pip3 install sqlalchemy
         sudo apt-get install python3-pip
  　离线：
  　$tar -xzvf sqlzlchemy.tar.gz
  　$cd sqlalchemy
  　$sudo python3 setup.py install 
  3、示例
    import sqlalchemy

    class User(Base):
        __tablename__ = "t1"
	    id = Column(Integer,primary_key=True)
	    name = Column(String(20))
    解释：
      一个类 User --> 数据库1张表
      表中2个字段 ：id 和 name
  4、映射类型
    1.Python类(class)<-->数据库中表
    　class User ...      t1
    2.Python中类属性<-->数据库中表字段(id..)
      id=Column(Integer)
    3.关系映射
      1:1:通过主外键关联，从表添加唯一约束
      1:n：主外键关联
      m:n：通过中间表实现建立内连接，见多对多关联实现.png
  5、示例：
    1.在db5库里创建表t123,表中字段有：
    　id，整型，设置为主键，自增长
    　name，字符类型，宽度20
    　phnumber，字符类型，宽度11,唯一约束
    见：_sqlalchemy.py 
-----------------------------------------------------------------------------------------------------------
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base#(类)
from sqlalchemy import Column, Integer, String

# session会话
from sqlalchemy.orm import sessionmaker

# 创建数据库连接对象
engine = create_engine('mysql+pymysql://root:123456@localhost/db5')

# 创建一个orm基类
Base = declarative_base()

# 创建session会话对象
session = sessionmaker(engine)()


# 继承orm基类Base
class User(Base):
    __tablename__ = 't123'
    id = Column(Integer, primary_key=True)
    name = Column(String(20))
    phnumber = Column(String(11), unique=True)

    # 添加表记录
    def add_data(self):
        p = User(id=1, name='Lucy', phnumber='13838383838')
        session.add(p)
        session.commit()

    def select_data(self):
        result=session.query(User).filter_by(id=1).get_select()
        #result是一个列表，列表是对象
        for r in result:
            print(r.id,r.name)


# 提交到数据库执行
Base.metadata.create_all(engine)

if __name__ =='__main__':
    s = User()
    s.add_data()
    s.select_data()
------------------------------------------------------------------------------------------------------------------

    


