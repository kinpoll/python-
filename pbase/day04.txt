字符串的格式化表达式：
　作用：
　　生成一定格式的字符串
　运算符： %
　语法格式：
　　格式字符串　%　参数值
　　格式字符串　%  （参数值1，参数值2,...）
　说明：
　　格式字符串以%开头的字符为占位符，占位符的位置将用参数值替代
　示例：
    fmt="姓名: %s,年龄:　%d"
    name=input("请输入姓名:")
    age=input("请输入年龄:")
    s=fmt % (name,age)
    print(s)
--------------------------------------------
格式化字符串中的占位符和类型码：
%s           使用str(x)函数转换
%r           使用repr(x)函数转换
%c           整数转为单个字符#chr(x)
%d           整数转为10进制整数
%o           数转为8进制整数
%x           数转为16进制整数(字符a~f小写)
%X           数转为16进制整数(字符A~F大写)
%e           指整形浮点数(e小写)　如　2.9e10
%E           指整形浮点数(E大写)　如　2.9E10
%f,%F        浮点数10进制形式(默认保留６位)
%g,%G        10进制形式或指数形式浮点数自动转换
%%           等同于一个%
--------------------------------------------
占位符和类型码之间的格式化语法：
　格式：　
　　% - + 0 宽度.精度 类型码
　说明：
　　－　左对齐（默认为右对齐）
　　+　显示正号
　　0　左侧空白位置补零
　　宽度：整个数据输出的宽度
　　精度：保留小数点后多少位（默认6位）(仅限在浮点数起作用)
　示例：
   "%10d" % 123   #'       123'             (左面补７个空格字符、默认右对齐)
   "%-10d" % 123  #'123       '　　　　　　　　（右面补７个空格字符，左对齐）　　　　　
   "%10s" % 'abc' #'       abc'
   "%-5s" % 'abc' #'abc  '
   "%-010d" % 123  #'123'
   "%.2f" % 12.34567890 #'12.35'
   "%7.2f" % 12.34567890 #'  12.35'
练习：
输入三行文字，让这三行文字依次以２０个字符的宽度右对齐输出
如：
　请输入第1行：hello beijing
　请输入第2行：abcd
　请输入第3行：a
输出结果：
         hello beijing
                  abcd
                     a
做完上面的题思考：
　能否以最长字符串的长度进行右对齐显示（左侧填充空格）

循环语句
 while 语句
 for 语句
－－－－－－－－－－－－－－－－－－－－－－－－
 问题：
 　输入一个整数n，写程序打印如下n行文字
  　这是第1行
  　这是第2行
  　...
  　这是第n行
－－－－－－－－－－－－－－－－－－－－－－－－
while语句：
　作用：
　　根据一定条件，重复的执行一条语句或多条语句
　语法：　
　　while　布尔表达式：
　　    语句块1（*此部分的语句可能会重复执行）
　　else:
　　    语句块2
　说明：
　　else 子句可以省略（同if类似）
　执行步骤：
　1.先执行真值表达式，测试布尔值是否为True或False
　2.如果真值表达式测试值为True，则执行语句1，然后再回到第一步
　3.如果真值表达式测试值为Fasle,则执行else子句中的语句2，然后结束此段while语句。如果没有else语句，则直接结束此while语句的执行
思考：
　打印1~20的整数

练习：
１．写程序，打印１～２０的整数，打印在一行显示，每个数字之间用空格分隔
　　如：１　２　３　．．．１８　１９　２０　
　　提示：
　　　print(n,end=' ')　　
２．打印１～２０的整数，每行打印５个，打印４行
　　如：
　　　　１　２　３　４　５
　　　　６　７　８　９　１０　
3.打印图形：输入一个整数，打印一个宽度和高度都是n个字符的长方形
　如：　
　　输入：４
   ####
   #  #
   ####
   输入：６
   ######
   #    #
   #    #
   #    #
   #    #
   ######
４．计算１＋２＋．．．＋１００的和打印出来
５．输入开始和结束值并打印开始到结束之和
６．输入一个开始和结束值分别用变量begin和end绑定
　　打印从begin~end的每个整数，打印在一行内
　　如：
　　　　请输入开始值：８
　　　　请输入结束值：３０
　　打印：　
　　　　８　９　１０　．．．３０
　　完成后思考：
　　　　如何实现每５个整数打印在一行内，打印多行？
　　　　提示：可以多加一个变量来记录打印个数

while语句的注意事项：
　１．控制循环的真值表达式来防止死循环
　２．通常在循环语句块内改变循环变量来控制循环次数和变量的走向
　
while语句的嵌套：
　while语句本身也是语句，和其他语句一样，可以嵌套到任何复合语句中
　示意：
　　while 真值表达式:
　　     ...
　　     while 真值表达式:
　　　　    ...
        else:
           ...
        ...
    else:
        ....
  示例：
  　打印１～２０整数。打印在一行内
  　1 2 3...20
  　1 2 3...20
  　1 2 3...20
  　1 2 3...20
  　．．．（打印１０行）

练习：
　输入一个数，打印指定宽度的正方形
　如：
　　输入：５
　　打印：　
　　　　　１２３４５
　　　　　１２３４５
　　　　　１２３４５
　　　　　１２３４５
　　　　　１２３４５
break语句
　问题：
　　如果在循环着过程中，不想再继续执行此循环的执行了，怎么办？
　作用：
　　用于循环语句（while,for语句）中，用来终止当前语句的执行
　说明：
　　１．当break执行后，此循环语句内break之后的语句将不再执行
　　２．break通常和if语句组合使用
　　３．break终止循环时，循环语句的else子句将不会被执行
　　４．break语句只能终止当前循环语句的执行，如果有循环嵌套时，不会跳出外重循环
　
死循环
　死循环是指条件一直成立的循环                 while True
　死循环通常用break语句来终止循环
　死循环的else子句永远不会执行
　死循环通常用在循环次数不确定的循环中
　示例：
　　while True:
       n=int(input("请输入整数："))
       if n==0:
          break语句
       print("请输入的是：",n)
练习：
　任意输入一个整数，当输入小于零的数时结束输入，当输入完成后，打印您输入的这些正整数的和
　如：
　　请输入：１
　　请输入：２
　　请输入：３
　　请输入：４
　　请输入：-１
　打印：您刚才输入这些正整数的和为：１０

------------------------------------------------------------------------------------------------------------------------------
练习：
１．打印从０开始的浮点数，每个数增加０．５，打印出１０以内这样的数
　　0.0 0.5 1.0 1.5...............9.0 9.5
２．写程序求：
　 1/1+1/3+1/5+1/7+...+1/99的和
３．输入一个整数表求三角形的宽度和高度，打印出如下的三角形：
      如：
      　　请输入三角形的宽度：4
      打印如下：
          *
          **
          ***
          ****
４．写程序，输入一个整数代表正方形的宽和高，打印如下的正方形：
    如：
    　请输入宽度：5
    打印正方形如下：
        1 2 3 4 5
        2 3 4 5 6
        3 4 5 6 7
        4 5 6 7 8
        5 6 7 8 9
      请输入宽度：4
    打印正方形如下：
        1 2 3 4 
        2 3 4 5 
        3 4 5 6 
        4 5 6 7 
















        
        



    

　


