python3中常用的列表函数：
>len函数
-可以用来得到序列的长度
----
a=[1,2,3,4]
len(a) #4
>max函数
-可以用来得到序列最大值的元素
a=[1,2,3,4,3.5,8.5]
max(a) #8.5
----
b=['a','yy','dd']
max(b) #yy
----
c=['a',1,4]
max(c) #error不支持整数和字符串之间的例子
>min函数
-可以用来得到列表中最小值的元素
----
a=[1,2,3,4,3.5,8.5]
b=['a','yy','dd']
c=['a',1,4]
min(a) #1
min(b) #a
min(c) #error不支持整数和字符串之间的例子
----
>sum函数
-可以得到列表中所有元素的和
-sum(列表[,起始值])
-起始值可以省略，缺省为0
----
a=[1,2,3]
sum(a) #6
sum(a,10) #16
b=[a,'b']
print(sum(b)) #error不支持整数和字符串求和
----


python3中列表方法
>>>help(str) 查询字符串使用方法
>>>help([])  查询列表使用方法

>得到列表中某个元素的索引（下标）
-L.index(value[,begin[,end]])
-value:要找的元素
-begin为开始索引,end为结束索引（查找范围）
示例：
a=[1,2,5,6,10,4,9,9]
a.index(9) #6
a.index(9,7,8) #7
a.index(9,7,19) #7
a.index(9,7,) #7
a.index(9,7) #7
a.index(0) #error０不在列表中

>得到列表中元素对应的个数
-L.count(object)
示例：
a=[1,2,5,6,10,4,9,9]
a.count(1) #1
a.count(9) #2
a.count(3) #0

>向列表中添加元素
-L.append(object)
-object要添加的元素
－返回None
示例：
a=[1,2,5,6,10,4,9,9,'aa']
b=a.append(10)
print(a) #[1,2,5,6,10,4,9,9,'aa',10]
print(b) #－None 
a.append([100,200])
print(a) #[1,2,5,6,10,4,9,9,'aa',10,[100,200]]

>向列表追加另一个列表
-L.extend(iterable)
-iterable要追加的元素(可迭代对象)
-返回None
示例：
a=[1,2,9,10,3,4,8]
a.extend('aa') #[1,2,9,10,3,4,8,'a','a']
a.extend(100) #error整数不是可迭代对象
a.extend([20,30,40]) #[1,2,9,10,3,4,8,'a','a',20,30,40]

>思考：
L.append()和L.extend之间的异同？
1.L.append()可以添加任意元素，添加进去的元素作为一个整体构成L的新元素
2.L.extend()添加的元素必须为可迭代对象，添加进去的元素遍历拆开后单独构成L的新元素
3.使用L.append()和L.extend()之后id(L)未发生变化
4.都返回None
所以：
若要往列表中添加字符串、数据、列表，首选L.append
若要往列表中添加可迭代对象的单个元素，首选L.extend

>向列表指定位置插入元素
-L.insert(index,object)
-index位置
-object要插入的元素
-返回None 
示例：
a=[1,2,9,10,3,4,8,'a','a',20,30,40]
b=a.insert(2,[100,200])
print(b) #None
print(a) #[1,2,[100,200],9,10,3,4,8,'a','a',20,30,40]
a.insert(2,100)
print(a) #[1,2,100,[100,200],9,10,3,4,8,'a','a',20,30,40]
a.insert(30,'a') 
print(a) #[1,2,100,[100,200],9,10,3,4,8,'a','a',20,30,40,'a']
a.insert(-40,'b')
print(a) #['b',1,2,100,[100,200],9,10,3,4,8,'a','a',20,30,40,'a']
a.insert(-2,'c')
print(a) #['b',1,2,100,[100,200],9,10,3,4,8,'a','a',20,30,'c',40,'a']

>思考：
L.insert(index,object)和切片赋值插入的区别？
1. 切片赋值插入的元素必须是可迭代对象，插入进去的元素遍历拆开后单独构成L的新元素，可根据步长分散插进，返回为object,id(L)不会变
2. L.insert(index,object)插入进去的元素没有要求，插入元素作为一个整体构成L的新元素，只能插入某个位置，返回为None,id(L)不会变

==================================================
day1 笔记：

列表
　向列表内添加数据
　　L[0:0] = [100,200]   列表最前端添加数据
　修改数据：
　　L[1] = 300
　　L[1:5] = [1,2,3]
  删除数据：
  　L[1:5] = []

del 语句  
  用于删除列表元素
  示例：
    del L[2]    #删除单个元素
    del L[::2]  #删除切片切出来的一部分

练习1：
　已知有列表：
　　L = [3;5]
    用索引的切片等操作，将原列表的改变为:
    L = [1,2,3,4,5,6]
    将列表反转（先后顺序颠倒），删除最后
    一个元素后，打印此列表：
　　　　print(L)    #[6,5,4,3,2]
-----------------------------------------------
L = [3, 5]
print(id(L))
L[1:1] = [4]
L[0:0] = [1, 2]
L[len(L):len(L)] = [6]
print(L)
L[::] = L[::-1]
del L[-1]
print(L)
print(id(L))#id(L)前后未变
-----------------------------------------------


python3 中常用于序列的函数:
  len(x)   返回序列长度
  max(x)   返回序列内的最大元素
  min(x)   返回序列的最小元素
  sum(x)   返回序列中所有元素的和（元素必须是数值类型）
  any(x)   真值测试，如果序列中其中一个值为真值则
           返回Ture
  all(x)   真值测试，如果列表中所有的值为真值才返回
           True
  示例：
   L = ['one',2,'三'] 
   print(len(L))    #  3
   L = [8,3,6,2] 
   min(L)      #   2
　　any([None,Flase,0.0,0,[],''])    # Flase
   any([None,Flase,0.0,0,[],'',1])  #  True
   all([None,Flase,0.0,0,[],''])    # Flase
   all([None,Flase,0.0,0,[],'',1])  #  Flase
　　注：all  全部数值都满足真值　　　　
　　　　any  任意一个数值满足真值

练习02:
  1.输入三个数，存于列表中，打印出这三个数的
    最大值，最小值和平均值
-----------
a = int(input("请输入第1个数: "))
b = int(input("请输入第2个数: "))
c = int(input("请输入第3个数: "))

L = [a, b, c]
print("最大值是:", max(L))
print("最小值是:", min(L))
print("平均值是:", sum(L)/len(L))
-----------
  2.写程序，让用户循环输入一些整数，当输入-1时
    结束输入，将这些整数存于列表L中
    　①　打印您输入了几个有效的数值
    　②　打印您输入的数的最大值
    　③　打印您输入的数的平均值　　　　　
------------------
L = []  # 先创建一个列表,用L绑定,装备存放数据
while True:
    n = int(input("请输入不等于-1的整数: "))
    if -1 == n:
        break
    # 将n放到的L绑定的列表中
    # 放入到列表的末尾:
    L += [n]  # L[len(L):len(L)] = [n]

# print(L)
# 1) 打印您共输入了几个有效的数
print("您共输入了%d个数" % len(L))
# 2) 打印您输入的数的最大值是多少?
print("最大值是:", max(L))
# 3) 打印您输入的数的平均值是多少?
print("平均值是:", sum(L)/len(L))
------------------

Python3中常用的列表方法（method)

    见:help(list)

方法 	意义
L.index(v [, begin[, end]]) 	返回对应元素的索引下标, begin为开始索引，
                                end为结束索引,当 value 不存在时触发ValueError错误
L.insert(index, obj) 	将某个元素插放到列表中指定的位置
L.count(x)            	返回列表中元素的个数
L.remove(x) 	        从列表中删除第一次出现在列表中的值
L.copy() 	            复制此列表（只复制一层，不会复制深层对象)
L.append(x)         	向列表中追加单个元素
L.extend(lst)       	向列表追加另一个列表
L.clear() 	            清空列表,等同于 L[:] = []
L.sort(reverse=False) 	将列表中的元素进行排序，默认顺序按值的小到大的顺序排列
L.sort(reverse=True) 	将列表中的元素进行排序，顺序按值的大到小的顺序排列
L.reverse() 	        列表的反转，用来改变原列表的先后顺序
L.pop([index]) 	        删除索引对应的元素，如果不加索引，默认删除最后元素，
                        同时返回删除元素的引用关系
示例：
L = (1,2,3,2,3,4)
L.insert(3,1.0)   # L =[1,2,3,1.0,2,3,4]
L =[0.0,1,2,3,1.0,2,3,4]
L.remove(0.0)     # L =[1,2,3,1.0,2,3,4]
L =[1,2,3,0,2,3,4]
L.sort()      # L =[0,1,2,2,3,3,4]
L.sort(reverse=True)      # L = [4,3,3,2,2,1,0]]

L = [5,3,1]
V = L.pop(0)    #  5       拿出对应数值


列表的深拷贝和浅拷贝

浅拷贝 shallow copy
  浅拷贝是指在复制过程中，只复制一层变量，不会复制深层变量绑定的对象的复制过程
示意:
  L = [3.1, 3.2]
  L1 = [1, 2, L]
  L2 = L1.copy()  # 浅拷贝
  print(L1)  # [1, 2, [3.1, 3.2]]
  print(L2)  # [1, 2, [3.1, 3.2]]
  L2[2][0] = 3.1
  print(L1)  # [1, 2, [3.14, 3.2]]
  print(L2)  # [1, 2, [3.14, 3.2]]

深拷贝 deep copy
  复制对象及对象关联的对象一起复制过程叫深拷贝
示意代码
  import copy  # 导入复制模块
  L = [3.1, 3.2]
  L1 = [1, 2, L]
  L2 = copy.deepcopy(L1) 　# 深拷贝
  print(L1)  # [1, 2, [3.1, 3.2]]
  print(L2)  # [1, 2, [3.1, 3.2]]
  L2[2][0] = 3.14
  print(L1)  # [1, 2, [3.1, 3.2]]　　<<< L1不变
  print(L2)  # [1, 2, [3.14, 3.2]]
　

##   字符串　赋值变量改变　其余相等的变量值不改变
　　　列表　　赋值变量改变　其余相等的变量值改变，因此需要深拷贝，防止改变其他变量　

列表和字符串比较：
  1. 都是序列，元素之间有先后顺序关系，有相同的运算操作
  2. 字符串是不可变的序列，列表是可变的序列
  3. 列表可以存任意类型的数据，字符串中每个元素只能存储字符（编码）
  4. 列表和字符串都示可迭代对象

字符串文本解析方法split 和　join
 　S.split(sep=None)  将字符串，使用sep作用分割符分割S字符串(sep代表的字符要从S字符串中取)，返回分割后的字符串列表，当不给定参数时，用空白字符作用分隔符分割
 　
 　S.join(iterable)   用可迭代对象中的字符串中，返回一个中间用S进行分割的字符串
示例:
  s = "Beijing is capital"
  L = s.split(' ')      # L = ['Beijing', 'is', 'capital']
  L = ['aaa', 'bbbb', 'ccccc']
    S2 ='#'.join(L) # 生成 'aaa#bbbb#ccccc'


练习03:
  有字符串
  　s = "hello"
  请生成如下字符串：
  　'h e l l o'  和　'h-e-l-l-o'


列表推导式 list comprehension
  列表推导式是用可迭代对象创建列表的表达式

  作用:
    用简易方法生成列表
  语法:
    [表达式 for 变量 in 可迭代对象]
    或
    [表达式 for 变量 in 可迭代对象 if 真值表达式]
  示例:
    # 生成一个数值为1~9的平方的列表
    # [1, 4, 9, 16, .... 81]
    # 不用推导式:
    L = []
    for i in range(1, 10):
        L.append(i**2)
    # 推导式实现
    L = [i ** 2 for i in range(1, 10)]

练习:
 　用列表推导式生成1~100内多有的奇数的平方的列表
 　　  L= [i ** 2 for i in range(1,100,2)]
      L= [i ** 2 for i in range(1,100) if i %2 ==1]
  　用列表推导式生成1~10内多有的偶数的平方的列表
  　　L= [i ** 2 for i in range(1,10) if i %2==0]　
练习04.
　1.写程序，输入一个开始的整数值用begin绑定，输入一个结束
　　　　　值用end绑定
　　　　　　将从begin开始到end结束的所有偶数存于列表中，
　　　　　　并打印（建议使用列表推导式完成）
----------
begin = int(input("请输入开始值: "))
end = int(input("请输入结束值: "))
L = [x for x in range(begin, end) if x % 2 == 0]
print(L)
------------
 2.写程序，让用户输入很多个整数（包含正整数和负整数），保存于列表Ｌ中，输入０结束，
 然后把列表Ｌ中的所有整数存于列表Ｌ1中，把列表Ｌ中的所有整数存于列表L2中
 打印列表L , L1 , L2
-------------
L = []
while True:
    x = int(input("请输入整数(0结束): "))
    if x == 0:
        break
    L.append(x)

L1 = [x for x in L if x > 0]  # 正数
L2 = [x for x in L if x < 0]  # 负数
print("原列表是:", L)
print("正数的列表L1=", L1)
print("负数的列表L2=", L2)
---------------


列表推导式的嵌套:
　　语法：
　　[表达式1
    for 变量1 in 可迭代对象1 if 真值表达式1 for 变量2 in 可迭代对象2 if 真值表达式2  ...]  

示例：
  将列表[10,20,30] 中的元素与　[1,2,3]　列表元素相加
　L = [x + y for x in [10,20,30,] for y in [1,2,3]]
  # L　＝　[11,12,13,21,22,23,31,32,33]

练习:
1.用字符串‘ABC'和'123'生成如下列表
  ['A1', 'A2', 'A3', 'B1', 'B2',
          'B3', 'C1', 'C2', 'C3']
--------
  L = [x + y for x in "ABC" for y in "123"]
-------
2.已知有一个字符串
　　s = '100,200,300,500,800,'
   将其转化为数值组成的列表，；列表内部为整数:
   L = [100,200,300,500,800]
--------
s= '100,200,300,500,800'
# 方法1
# L1 = s.split(',')
# L = []
# for x in L1:
#     i = int(x)
#     L.append(i)
# 方法2
L = [int(x) for x in s.split(',')]
print("L=", L)
----------
3.用列表推导式生成如下列表:
  L = [1,4,7,10,...,100]
------------
print([x for x in range(1,101,3)])
------------
4.用列表推导式生成如下列表（思考题）
　L = [[1,2,3],[4,5,6],[7,8,9]]
-------------
L=[]
L1=[]
L2=[]
L3=[]
for x in range(1,4):
    L1.append(x)
    L2.append(x+3)
    L3.append(x+6)
L=[L1,L2,L3]
print(L)
------------------



homework
练习:
1.　有一些数存于列表中，如:
   L = [1,3,2,1,6,4,2,...98,82]
   ①　将列表L中出现的数字存入到另外一个列表L2中
   　要求：
   　　　重复出现多次的数字只能在L2中保留一份（去重）
   ②　将列表中出现两次的数字存于列表L3中，在L3中只
   　　保留一份
-----------
L = [1,3,2,1,6,4,2,6,6,98,82]
L2=[]
L3=[]
for x in L:
    if x not in L2:
        L2.append(x)
    if L.count(x)==2 and x not in L3:
        L3.append(x)
print('L2=',L2)
print('L3',L3)
------------
2.计算出100以内的全部素数，将这些素数存于列表中，
　然后打印出列表中的这些素数
------
L=[]
for x in range(1,101):
    isprime=True
    if x<2:
        isprime=False
    else:
        for i in range(2,x):
            if x%i==0:
                isprime=False
                break
    if isprime:
        L.append(x)
print('L=',L)
------
3.生成前40个斐波那契数列（Fibonacci）中的数
  1 1 2 3 5 8 13 21 .....
  要求: 将这些数保存于列表中，并打印这些数
---------------------
方法一
L=[]
a=0
b=1
while len(L)<40:
    L.append(b)
    a,b=b,a+b
print(L)
---------------------
方法二
L=[1,1]
while len(L)<40:
    L.append(L[-1]+L[-2])
print(L)

