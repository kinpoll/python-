异常（基础）exception
什么是错误
　错误是指由于逻辑或语法等导致一个程序无法正常执行的问题

什么是异常
　异常是指出错时标识的一种状态
　当异常发生时，程序不会再向下执行，而转去调用此函数的地方待处理此错误并回复为正常状态

作用：
　用作信号，通知上层调用者有错误产生需要处理

try语句
两种语法：
　try-except语句
　try-finally语句
－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
try-except语句：
语法：
　try:
     可能触发异常的语句
　except 错误类型1 [as 变量名1]:
　　　异常处理语句1
　except 错误类型2 [as 变量名2]:
　　　异常处理语句2
　except (错误类型3,错误类型4) [as 变量名3]:
　　　异常处理语句3
　except:
　　　异常处理语句other
　else:
　　　未发生异常语句
　finally:
　　　最终语句
作用：
　尝试捕获异常通知，将程序由异常流程转为正常流程并继续执行
说明：
　except子句可以有一个或多个，但至少要有一个
示例：
－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
# try_except.py
def div_apple(n):
    print("%d个苹果您想分给几个人?" % n)
    s = input('请输入人数: ')
    count= int(s)  # <<- 可能触发ValueError错误进入异常
    result = n / count  # <<-- 可能触ZeroDivisionError错误
    print("每个人分了%d个苹果" % result)

try:
    div_apple(10)
    print("分苹果完成")
except ValueError:
    print("在try的内部语句中发生了值错误，已处理并转为正常状态")
except ZeroDivisionError:
    print('输入人数为零，分苹果失败!')
print("程序正常退出")
－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
# try_except_else.py
def div_apple(n):
    print("%d个苹果您想分给几个人?" % n)
    s = input('请输入人数: ')
    cnt = int(s)  # <<- 可能触发ValueError错误进入异常
    result = n / cnt  # <<-- 可能触ZeroDivisionError错误
    print("每个人分了", result, '个苹果')
try:
    div_apple(10)
    print("分苹果完成")
except:
    print("有异常发生") 
else:  # 只有在try没发错误发生时才会执行
    print("在当前try语句内部，没有发生任何的异常，程序走正常流程")
print("程序正常退出")
－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
# try_except_else_finally.py
# 此示例示意try-except语句中finally子句的用法
def div_apple(n):
    print("%d个苹果您想分给几个人?" % n)
    s = input('请输入人数: ')
    cnt = int(s)  # <<- 可能触发ValueError错误进入异常
    result = n / cnt  # <<-- 可能触ZeroDivisionError错误
    print("每个人分了", result, '个苹果')
try:
    div_apple(10)
    print("分苹果完成")
except ValueError:
    print("有异常发生且已捕获")
else:
    print("无异常发生，else子句被执行")
finally:
    # finally 子句的语句无论是正常流程还是异常流程都会被执行
    print('我这条finally子句一定会执行的')
print("程序正常退出")
－－－－－－－－－－－－－－－－－－－－－－－－－－－－－

Python全部的错误类型
错误类型 	说明
	
ZeroDivisionError 	除(或取模)零 (所有数据类型)
ValueError 	传入无效的参数
AssertionError 	断言语句失败
StopIteration 	迭代器没有更多的值
IndexError 	序列中没有此索引(index)
IndentationError 	缩进错误
OSError 	输入/输出操作失败
ImportError 	导入模块/对象失败
NameError 	未声明/初始化对象 (没有属性)
AttributeError 	对象没有这个属性
	
GeneratorExit 	生成器(generator)发生异常来通知退出
TypeError 	对类型无效的操作
KeyboardInterrupt 	用户中断执行(通常是输入^C)
OverflowError 	数值运算超出最大限制
FloatingPointError 	浮点计算错误
BaseException 	所有异常的基类
SystemExit 	解释器请求退出
Exception 	常规错误的基类
StandardError 	所有的内建标准异常的基类
ArithmeticError 	所有数值计算错误的基类
EOFError 	没有内建输入,到达EOF 标记
EnvironmentError 	操作系统错误的基类
WindowsError 	系统调用失败
LookupError 	无效数据查询的基类
KeyError 	映射中没有这个键
MemoryError 	内存溢出错误(对于Python 解释器不是致命的)
UnboundLocalError 	访问未初始化的本地变量
ReferenceError 	弱引用(Weak reference)试图访问已经垃圾回收了的对象
RuntimeError 	一般的运行时错误
NotImplementedError 	尚未实现的方法
SyntaxError Python 	语法错误
TabError 	Tab 和空格混用
SystemError 	一般的解释器系统错误
UnicodeError 	Unicode 相关的错误
UnicodeDecodeError 	Unicode 解码时的错误
UnicodeEncodeError 	Unicode 编码时错误
UnicodeTranslateError 	Unicode 转换时错误
以下为警告类型 	
Warning 	警告的基类
DeprecationWarning 	关于被弃用的特征的警告
FutureWarning 	关于构造将来语义会有改变的警告
OverflowWarning 	旧的关于自动提升为长整型(long)的警告
PendingDeprecationWarning 	关于特性将会被废弃的警告
RuntimeWarning 	可疑的运行时行为(runtime behavior)的警告
SyntaxWarning 	可疑的语法的警告
UserWarning 	用户代码生成的警告　
－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
练习：
写一个函数get_score()来获取学生输入的成绩(0~100)的数，如果用户输入的不是0~100得数则返回0,否则返回输入的整数
--------------------------
#方法一:在调用get_score时使用try_except语句
def get_score():
    grade=int(input('请输入成绩：'))
    if not (0<=grade<=100):
        return 0
    return grade
try:
    score=get_score()
except:
    score=0
finally:
    print('学生成绩登记为：',score)
#方法二:在函数get_score里使用try_except语句
def get_score2():
    try:
        grade2=int(input('请输入成绩：'))
    except:
        return 0
    if not (0<=grade2<=100):
        return 0
    return grade2
score2=get_score2()
print('学生成绩登记为：',score2)
---------------------------------------------

try-finally语句
语法：
try:
    可能触发异常的语句
finally:
    最终语句
说明：
finally语句不可以省略
一定不存在except子句
作用：
１．通常用try-finally语句来做触发异常时必须要处理的事情，无论异常是否发生，finally子句都会被执行
２．try-finally语句不会改变程序的(正常/异常)状态
示例：
# try_finally.py
def fry_egg():
    print("打开天燃气...")
    try:
        count = int(input("请输入鸡蛋个数: "))
        print("完成煎鸡蛋,共煎了%d个鸡蛋!" % count)
    finally:
        print('关闭天燃气')
try:
    fry_egg()
except:
    print("程序出现过异常，已转为正常状态")
print("程序正常退出")
－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
raise语句
作用：
触发一个错误，让程序进入异常状态，发送错误通知给调用者
语法：
raise 异常类型
#或
raise 异常对象
#或
raise #重新触发上一次异常
示例：
---------------------------
#此示例示意raise发送错误通知的用法：
def make_except():
    print('函数开始')
    #发出ZeroDivision类型的错误给调用者
    # raise ZeroDivisionError 
    e=ValueError('值错误')#创建一个错误对象
    raise e
    print('函数结束')
try:
    make_except()
except ZeroDivisionError:
    print('接收到make_except发出的错误通知')
except ValueError as err:
    print('ValueError-->',err)
print('程序正常结束')
----------------------------------
#此示例示意raise无参的用法
def fa():
    print('---fa开始---')
    raise ValueError('故意制造的一个错误')
    print('---fa结束---')
def fb():
    print('fb开始')
    try:
        fa()
    except ValueError as err:
        print('fa里发生了值错误已处理')
        #此处如果要将err再次向上传递
        raise
    print('fb结束')
try:
    fb()
except ValueError:
    print('再一次收到fb内部发生的错误')
－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
练习：
写一个函数get_age()用来获取一个人的年龄信息
此函数规定用户只能输入1~140之间的整数，如果用户输入的数是其他的数值，则直接触发ValueError类型的错误
如：
def get_age():
    ...

try:
    age=get_age()
    print('用户输入的年龄是：',age)
except ValueError as err:
    print('用户输入的不是1~140之间的数，获取年龄失败')
------------------------------------------------------------------------
def get_age():
    try:
        a=int(input('输入年龄（1~140之间的数）：'))
    except ValueError:
        raise ValueError('用户输入的不是数字')
    if not (1<=a<=140):
        e=ValueError('输入的数不在1~140之间')
        raise e
    return a 
try:
    age=get_age()
    print('用户输入的年龄是：',age)
except ValueError as err:
    print(err,'获取年龄失败')
----------------------------------------------------------------------------
assert语句(断言语句)
语法：
assert　真值表达式,错误数据(通常是字符串)
作用：
当真值表达式为False时，用错误数据创建一个AssertionError类型的错误，并进入异常状态
等同于
if bool(真值表达式)==Fasle:
    raise AssertionError(错误数据)
示例：
#assert.py
#此示例示意assert语句的用法：
def get_score():
    s=int(input('请输入学生成绩：(0~100)'))
    assert 0<=s<=100,'成绩超出范围'
    return s 
try:
    score=get_score()
    print('学生的成绩为：',score)
except AssertionError as err:
    print('AssertionError类型的错误被触发，且已捕获')
    print(err)
-------------------------------------------------------------------------------
小结：
异常相关的处理语句：
try-except语句：
　作用：
　捕获异常通知，将程序由异常状态转为正常状态
try-finally语句：
　作用：
　执行必须要执行的语句
raise语句：
　作用：
　触发异常(抛出异常)，让程序直接进入异常流程
asssert语句：
　作用：
　根据条件来触发AssertionError类的异常，并进入异常流程
-------------------------------------------------------------------------------
迭代器　Iterator
什么是迭代器
　迭代器是访问可迭代对象的工具
　迭代器是指用iter(obj)函数返回的对象（实例）
　迭代器可以用next(it)函数获取可迭代对象的数据
迭代器函数：
　iter(iterable)从可迭代对象中返回一个迭代器，iterable必须是能提供一个迭代器的对象
　next(iterable)从迭代器iterator中获取下一个记录，如果无法获取下一条记录，则触发StopIteration异常通知
说明：
　迭代器只能往前取值，不会后退
示例：
L=[1,3,5,7]
it=iter(L)#让iter函数从L中获取迭代器
　　　　　　#it绑定的是迭代器
print(next(it))#1
print(next(it))#3
print(next(it))#5
print(next(it))#7
print(next(it))#StopIteration
示例：
用迭代器和while来代替for循环
--------------------------------------
L=[2,3,5,7]
it=iter(L)#让iter函数从L中获取迭代器
#it绑定的是迭代器
while True:
    try:
        x=next(it)
        print(x)
    except StopIteration:
        break 
--------------------------------------
练习：
有一个集合s={'唐僧','悟空','八戒','沙僧'}
用for语句遍历所有元素：
for x in s:
    print(x)
else:
    print('遍历结束')
请将上面的for语句改写为while语句和迭代器实现
----------------------------------------
s={'唐僧','悟空','八戒','沙僧'}
it=iter(s)
while True:
    try:
        print(next(it))
    except StopIteration:
        print('遍历结束')
        break
-----------------------------------------
# 练习:
#   1. 一个球从100米高空落下，每次落地后反弹高度是原高度的一半，再落下
#       写程序算出皮球在第10次落地后反弹高度是多高?
#       打印出第10次落下后共经过了多少米的路程
-----------------------------------------
n=1
x=100
y=x/2
s=0
while n<=10:
    s+=x+y
    x=y
    y=x/2
    n+=1
print(x)
print(s-x)
-----------------------------------------
#   2. 分解质因数: 输入一个正整数，分解质因数:
#     如输入:
#       90
#     则打印:
#       '90=2*3*3*5'
#       (质因数是指小数最小能被原数整除的素数(不包含1))
-----------------------------------------
import sys
s=int(input('请输入一个正整数：'))
t=s
x=[]
y=[]
z=[]
u=[]
def isprime(x):
    if x<2:
        return False
    for i in range(2,x):
        if x%i==0:
            return False
    return True
if isprime(s)==True:
    print(str(s)+'='+str(s))
    sys.exit(0)
while s%2==0:
    x.append(2)
    s=s/2
while s%3==0:
    y.append(3)
    s=s/3
while s%5==0:
    z.append(5)
    s=s/5
while s%7==0:
    u.append(7)
    s=s/7
if s!=1:
    L=x+y+z+u+[int(s)]
else:
    L=x+y+z+u
L=[str(i) for i in L]
st='*'.join(L)
st=str(t)+'='+st
print(st)
-----------------------------------------
#方法二-----------------------------------
def is_prime(x):
    if x < 2:
        return False
    for i in range(2, x):
        if x % i == 0:
            return False
    return True
L = []  
n = int(input("请输入一个正整数: "))
number = n 
while n != 1:
    for i in range(2, n + 1):
        if n % i == 0 and is_prime(i):
            L.append(i)
            n = int(n / i)
            break 
print(number, "=", '*'.join([str(x) for x in L]),sep='')


