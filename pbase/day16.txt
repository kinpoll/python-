day15回顾
  生成器
    生成器函数
      含有yield 语句的函数
         1. 返回生成器对象(生成器对象也是可迭代对象)
         2. 执行顺序与普通函数不同
           1) 当next(it)函数调用时,生成器函数才执行
           2) 当遇到yield语句时,保存当前函数的执行状态,将yield 表达式 结果返回给next(it) 函数
           3) 生成器的返回会触发StopIteration异常
        def myyield():
            yield 1
            yield 2

    生成器表达式:
      (表达式 for 变量 in 可迭代对象 if ...)

迭代工具函数
  zip(*iterables) 
    zip([1,2,3], "ABCDE")
        (1, 'A')
        (2, 'B')
        (3, 'C')
  enumerate(iterable, start=0)
    enumerate("ABC")
        (0, 'A')
        (1, 'B')
        (2, 'C')
    enumerate("ABC", 100)
        (100, 'A')
        (101, 'B')
        (102, 'C')


序列
  字节串 bytes
    不可变序列
    字面值:
      b''   b""    b''''''    b""""""
      b'hello'
  字节数组 bytearray
    可变的序列
  构造函数:
    bytes() / bytearray()
    bytes(整数可迭代对象)/bytearray(整数..)
    bytes(整数n) / bytearray(整数n)
    bytes(字符串,encoding='utf-8') /.....
  运算:
    +  += * *= 
    < <= > >= == !=
    in / not in 
    索引和切片

  字节
    0(0b00000000) ~ 255(0b11111111)


day16笔记:
文件 File
  什么是文件
    文件是用于数据的存储的单位
    文件通常用于长期存储数据
    文件中的数据是以字节为单位进行顺序存储的

文件的操作流程:
  1. 打开文件 
  2. 读/写文件
  3. 关闭文件

文件的打开函数:
  open(file, mode='rt')  用于打开一个文件,返回此文件流对象,如果打开失败,则会触发OSError错误!
     file 是文件路径名的字符串
     mode 是打开的模式
 

文件
mode 模式字符的含义
字符 	含义
'r' 	以只读方式打开(默认)
'w' 	以只写方式打开，删除原有文件内容(如果文件不存在，则创建该文件并以只写方式打开)
'x' 	创建一个新文件, 并以写模式打开这个文件,如果文件存在则会产生"FileExistsError"错误
'a' 	以只写文件打开一个文件，如果有原文件则追加到文件末尾
'b' 	用二进制模式打开
't' 	文本文件模式打开 (默认)
'+' 	为更新内容打开一个磁盘文件 (可读可写)

    缺省模式是 'rt'
    'w+b' 可以实现二进制随机读写，当打开文件时，文件内容将被清零
    'r+b' 以二进制读和更新模式打开文件,打开文件时不会清空文件内容
    'r+' 以文本模式读和更新模式打开文件,打开文件时不会清空文件内容

python 文件常用方法:
方法 	说明
F.close() 	关闭文件(关闭后文件不能再读写会发生ValueError错误)
F.readline() 	读取一行数据, 如果到达文件尾则返回空行
F.readlines(max_chars=-1) 	返回每行字符串的列表,max_chars为最大字符(或字节)数
F.writelines(lines) 	将字符串的列表或字符串的列表中的内容写入文件
二进制文件操作方法 	
F.read(size=-1) 	从一个文件流中最多读取size个字符(文本文件)或字节(二进制文件),如果不给出参数，则默认读取文件中全部的内容并返回
F.write(text) 	写一个字符串到文件流中，返回写入的字符数(文本文件)或字节数(二进制文件)
F.tell() 	返回当前文件流读写指针的绝对位置(字节为单位)
F.seek(offset, whence=0) 	改变数据流读写指针的位置，返回新的绝对位置
F.flush() 	把写入文件对象的缓存内容写入到磁盘
	
F.readable() 	判断这个文件是否可读,可读返回True,否则返回False
F.writable() 	判断这个文件是否可写,可写返回True,否则返回False
F.seekable() 	返回这个文件对象是否支持随机定位
F.truncate(pos = None) 	剪掉 自pos位置之后的数据，返回新的文件长度



文件的关闭方法:
  F.close()  # 关闭已经打开的文件,释放系统资源

示例见:
-------------------------------------------------------------------------------------------------------------------------------

# file_open.py


# 此示例示意文件的打开操作

# 打开文件
try:
    # f = open("mynote.txt")  # 打开文件,用f绑定文件流对象
    f = open("不存在的文件.txt")
    print("成功打开文件")

    # 读写文件

    # 关闭文件
    f.close()
    print("成功关闭文件")
except OSError:
    print("打开文件失败")
-------------------------------------------------------------------------------------------------------------------------------

文本文件的基本操作:
  读文件:
    F.readline()  # 读取一行文字
    F.readlines()  # 读取多行文字
    F.read(n)  # 读取n个字符
  写文件:
    F.write(字符串)  # 写字符串到一个已经打开的文件
    F.writelines(字符串列表)  # 写多个字符串到已经打开文件中
------------------------------------------------------------------------------
# 此示例示意文件的打开和读操作

try:
    # 打开文件
    f = open("/home/tarena/aid1808/pbase/day16/code/mynote.txt")

    # 读写文件
    s = f.readline()  # 从文件中读取一行文字
    print("您读到的是:", s)
    print("您读取的字符个数得:", len(s))

    # 关闭文件
    f.close()
    print("成功关闭文件")
except OSError:
    print("打开文件失败")
---------------------------------------------------------------------
# 此示例示意写文本文件
try:
    # 1. 打开文件
    # f = open("/myfile.txt", 'w')  # 失败
    f = open("myfile.txt", 'w')
    print("打开文件成功")

    # 2. 写文件
    f.write("这是第一行文字")
    f.write("\n\n")
    f.write("ABCDEFG")
    f.writelines(["aaaaaaaaaa",
                "bbbbbb",
                "cccccc"])

    print("写文件成功")

    # 3. 关闭文件
    f.close()
    print("文件已关闭")
except OSError:
    print("打开文件失败")
------------------------------------------------------------------------
# 此示例示意写文本文件
try:
    f = open("myfile.txt", 'a')
    print("打开文件成功")

    # 2. 写文件
    f.write("ABCD\n")
    print("写文件成功")

    # 3. 关闭文件
    f.close()
    print("文件已关闭")
except OSError:
    print("打开文件失败")
---------------------------------------------------------------------------------------

练习:
  将如下数据用编辑器写入到文件data.txt中,数据如下:
    小李 13888888888
    小赵 13999999999
    张三丰 010-88888888
    写程序读取文件中的数据,打印出姓名和电话号码,格式如下:
      姓名: 小李 电话: 13888888888
      姓名: 小赵 电话: 13999999999
      姓名: 张三丰 电话: 010-88888888
-------------------------------------------------------------------
# 1. 打开文件
myfile = open("pbase/day16/exercise/data.txt")
# myfile = open("./data.txt")

# 2. 读取文件数据,并打印为相应格式
# 方法1,每次读取一行,然后进行处理后打印
while True:
    line = myfile.readline()
    if line == '':
        break
    line = line.strip()  # 去掉末尾的'\n'
    L = line.split()  # 将其拆分为字符串列表
            # L=['小李', '13888888888']
    print('姓名:', L[0], "电话:", L[1])

# 3. 关闭文件
myfile.close()
-------------------------------------------------------------------------
# 1. 打开文件
# myfile = open("pbase/day16/exercise/data.txt")
myfile = open("./data.txt")

# 2. 读取文件数据,并打印为相应格式
# 方法2, 先读取所有文字到内存中,形成列表
lines = myfile.readlines()
for line in lines:
    line = line.strip()  # 去掉末尾的'\n'
    L = line.split()  # 将其拆分为字符串列表
            # L=['小李', '13888888888']
    print('姓名:', L[0], "电话:", L[1])



# 3. 关闭文件
myfile.close()
-------------------------------------------------------------------------
# 1. 打开文件
# myfile = open("pbase/day16/exercise/data.txt")
myfile = open("./data.txt")

# 2. 读取文件数据,并打印为相应格式
# 方法3, 用read读取数据到内存中,然后再分行处理
s = myfile.read()

lines = s.split('\n')  # 以换行符进行拆分
for line in lines:
    L = line.split()  # 将其拆分为字符串列表
            # L=['小李', '13888888888']
    print('姓名:', L[0], "电话:", L[1])

# 3. 关闭文件
myfile.close()
------------------------------------------------------------------------------------------



文本文件读写时各操作系统的换行符问题
  Linux换行符: '\n'    # LF
  Window换行符: '\r\n'  # CRLF
  旧的Macintosh的换行符: '\r'
  新的Mac OS X 的换行符: '\n'

文本文件操作说明:
  文本模式下,各操作系统的换行符在读入python内部时会自动转换为'\n'
--------------------------------------------------------------------------------------
f = open("mynote_windows.txt")
s  = f.read()
print("s=", s)
print(len(s))  # 7字符('\r\n'已自动转换为'\n')
------------------------------------------------------------------------------------------
写文本文件的示例见:
  file_write.py
  打开模式:
    'w' 
    'x'
    'a'
    详见文档


练习:
  1.写一个程序,输入很多人的姓名,年龄,家庭住址,保存在文件"infos.txt"中
    (格式自定义,建议用空格或逗号分隔符)
  如: info.txt
    小李 20 北京市朝阳区
    小张 18 上海市浦东新区
  2. 写一个程序,读入infos.txt中的内容,以如下格式打印:
    姓名: 小张, 年龄:20, 住址: 北京市朝阳区
    ...
----------------------------------------------------------------------------
def read_from_file():
    '''返回字典组成的列表'''
    L = []
    try:
        f = open("infos.txt", 'r')
        while True:
            line = f.readline()
            if not line:
                break
            line = line.strip()  #'\n'
            items = line.split() 
            d = dict(name=items[0],
                    age=int(items[1]), 
                    address = items[2]
                    )
            L.append(d)
        f.close()
        print("读取文件成功")
    except OSError:
        print("打开文件失败")
    return L

def print_infos(L):
    print(L)  # 打印列表中的数据

# 分两步:
# 1. 从文件中读取数据,形成字典组成的列表
L = read_from_file()
# 2. 打印列表中的数据
print_infos(L)
-------------------------------------------------------------------------------------
def get_infos():
    '''此函数返回字典组成的列表
    return [{'name': '小李', 'age': 20, 'address': '北京市朝阳区'},
    {'name': '小张', 'age': 18, 'address': '上海市浦东新区'},
    ]
    '''
    L = []
    while True:
        n = input("请输入姓名: ")
        if not n:
            break
        a = int(input("请输入年龄: "))
        addr = input('请输入家庭住址: ')
        L.append(dict(name=n,
                      age=a,
                      address=addr))
    return L

def save_to_file(L):
    try:
        # 打开文件
        f = open("infos.txt", 'w')
        for d in L:
            f.write(d['name'])
            f.write(' ')
            f.write(str(d['age']))  # 需要转为字符串
            f.write(' ')
            f.write(d['address'])
            f.write('\n')  # 输出换行

        f.close()
    except OSError:
        print('打开文件失败')

# 分两步来做:
# 1. 读取数据形成字典组成的列表
L = get_infos()
# 2. 把列表里的数据保存到文件infos.txt中
print(L)
save_to_file(L)
----------------------------------------------------------------------------------------
文件的迭代读取
  文件流对象是可迭代对象,迭代过程将以换行符'\n'作为分隔符依次获取
  如:
    f = open("infos.txt")
    for line in f:
        print(line)

二进制文件操作
  操作模式字符: 'b'
  默认文件中存储的都是以字节(bytes为单位的数据，通常有人为规定的格式)
  对二进制文件的读写需要用字节串(bytes)进行操作

  F.read()的返回类型:
    对于文本模式. F.read()返回类型为字符串str
    对于二进制模式, F.read()返回字节串bytes

示例见: 
---------------------------------------------------------
# 此示例示意用二进制模式读取文件中的数据
f = open("mynote.txt", 'rb')  # 二进制读

b = f.read()  # 返回字节串
print('读取的内容长度是:', len(b))
print("内容是:", b)
s = b.decode()
print("转为字符串后s为:", s)
f.close()
--------------------------------------------------------------
# 0x00 0x01 0x02  ... 0xFF  # 256个

try:
    f = open("0_255.bin", 'wb') # 二进制写
    b = bytes(range(256))
    f.write(b)

    f.close()
    print("写数据成功")
except OSError:
    print("写文件失败!")
------------------------------------------------------------
# 此示例示意文件的打开和读操作

try:
    # 打开文件
    f = open("/home/tarena/aid1808/pbase/day16/code/mynote.txt")

    # 读写文件
    s = f.readline()  # 从文件中读取一行文字
    print("您读到的是:", s)
    print("您读取的字符个数得:", len(s))

    # 关闭文件
    f.close()
    print("成功关闭文件")
except OSError:
    print("打开文件失败")


F.tell()  # 返回当前文件流的绝对位置 
  示例见: 
-------------------------------------------------------------
# 此示例示意用F.tell() 方法获取文件流的读写位置
f = open("data.txt", 'rb')

f.read(3)
print("当前的读写位置是:", f.tell())  # 3

f.read(7)
print("当前的读写位置是:", f.tell())  # 10

f.close()
--------------------------------------------------------------

F.seek(偏移量, whence=相对位置))
  偏移量:
      大于0的数代表相后偏移(文件尾方向)
      小于0的数代表向文件头方向偏移
  相对位置：
      0 代表文件头位置开始偏移
      1 代表从当前位置开始偏移
      2 代表从文件尾开始偏移
  示例见:
-----------------------------------------------------------

# 此示例示意用seek 来改动文件的读写位置 

f = open('data.txt', 'rb')
b = f.read(3)
print("您读取的是:", b)
print("当前的读写位置是:", f.tell())

# 以下读写第5至第10个字节的b'abcde'
# f.seek(5, 0)  # 从文件头开始向后移动5个字节
# f.seek(2, 1)  # 从当前位置向后移动2个字节
f.seek(-15, 2)  # 从文件尾向向前移动15个字节

print("当前的读写位置是: ", f.tell())
b = f.read(5)
print("读取的内容是:", b)

f.close()
----------------------------------------------------------------

F.flush() 清空缓冲区
------------------------------------------------------------
import time

f = open("myflush.txt", 'w')
f.write("aaaaaaaaaaaaaaaaaaaaaaaaaa")
f.flush()  # 强制清空缓冲区

while True:
    time.sleep(0.1)

f.close()
--------------------------------------------------------------

标准输入输出文件:
  sys.stdin 标准输入文件(默认为键盘)
  sys.stdout 标准输出文件(默认为屏幕终端)
  sys.stderr 标准错误输入文件(默认为屏幕终端)

标准文件不需要打开和关闭,可以直接使用
  模块名: sys
示例见:
---------------------------------------------------------------
import sys

# 从标准输入文件中读取内容
# ctrl + d 输入文件结束符
s = sys.stdin.readline()
print(s)
print("len(s)=", len(s))

# 关闭标准输入文件,input将不再可用
# sys.stdin.close()

s = input("请输入: ")
print(s)

------------------------------------------------------------------



汉字编码问题
  问题:
     十个汉字占多少个字节?
       20个? 30个?
汉字编码:
  国标系列:
    GB18030(二字节或四字节编码,共27533个汉字)
      GBK(二字节编码,共21003个汉字)
        GB2312(二字节编码,共6763个汉字)
    注: Windows常用
  国际标准:
    Unicode <---> UTF-8
      Unicode16
          Unicode32
    (Linux / Mac OS X / Android 常用)

python 的编码字符串:
  'gb18030'
  'gbk'
  'gb2312'
  'utf-8'
  'ascii'

编码注释:
  在源文件的第一行或第二行写入如下内容为编码注释
  # -*- coding:gbk -*-
  或
  # -*- coding:utf-8 -*- 
  作用:
    告诉python解释执行器,当前文件的编码是什么?
-----------------------------------------------------
# -*- coding:gbk -*-

print("����й�") 
-------------------------------------------------------
# -*- coding:utf-8 -*-

print("你好中国")  # utf-8
---------------------------------------------------------

练习:
  1. 写程序实现复制文件功能:
     要求:
       1. 源文件路径和目标文件路径需手动输入
       2. 要考虑关闭文件问题
       3. 要考虑复制超大文件问题
       4. 要能复制二进制文件
-----------------------------------------
def mycopy(src_file,dst_file):
    '''此函数的功能实现复制文件\n
    src_file:原文件名\n
    dst_file:目标文件名
    '''
    try:
        fr=open(src_file,'rb')#fr读文件
        try:
            try:
                fw=open(dst_file,'wb')#fw写文件
                try:
                    while True:
                        date=fr.read(4096)
                        if not date:
                            break 
                        fw.write(date)
                except:
                    print('可能U盘被拔出')
                finally:
                    fw.close()#关闭写文件
            except OSError:
                print('打开写文件失败')
                return False
        finally:
            fr.close()#关闭读文件
            return True
    except OSError:
        print('打开读文件失败')
        return False

        
s=input('请输入原文件名')
d=input('请输入目标文件名')
if mycopy(s,d):
    print('复制文件成功')
else:
    print('复制文件失败')
-----------------------------------------------------------------------





