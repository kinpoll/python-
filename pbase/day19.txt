※day18回顾
※变量
※　特殊的类变量
※　　__slots__列表
※　预置的类变量：
※　　__doc__
※　　__base__
※类方法@classmethod
※　类方法内部不能访问此类的实例属性
※  @classmethod
※  def get_v(cls):
※      pass
※静态方法@staticmethod
※  依赖于类或此类的对象来调用
※  静态方法内部不能访问类的属性和类的实例的属性
※继承／派生
※　继承可以直接使用父类的方法
※　派生可以添加新的方法
※单继承
※　clas 类名(只有一个父类):
※　    pass
※覆盖override
※　１．有继承
※　２．子类中由同名的方法
※　３．子类对象来调用同名的方法
※　满足以上三个条件出现覆盖现象
※　覆盖能够（拓展）改变原有父类的行为
※super 
※　super(类，对象)
※　super()#限制在方法内调用
※
※------------------------------------------------------------------------------------------------------------------------------
※day19笔记
※用于类的函数：
※issubclass(cls,cls_or_tuple)
※  判断一个类是否继承自某个类cls或tuple中的某些类中的一个类，如果是其中一个类的派生类，则返回True,否则返回Fasle
※示例：
※class A:
※    pass
※class B(A):
※    pass
※class C(B):
※    pass
※issubclass(C,B)#True
※issubclass(B,A)#True 
※issubclass(C,A)#True
※issubclass(C,(int,str,float,B))#True
※issubclass(C,(int,str,float))#否则返回Fasle
※------------------------------------------------------------------------------------------------------------------------------
※封装enclosure
※　　封装是指隐藏类的实现细节，让使用者不用关心类的实现细节
※封装的目的
※　　是让使用者通过尽可能少的方法或属性来操作对象
※　　封装是靠私有属性和方法实现的
※------------------------------------------------------------------------------------------------------------------------------
※私有属性和方法：
※　python类中以双下划线('__')开头，不以双下划线('__')结尾的标识符为私有成员，私有成员只能使用（类和类的实例的）方法来进行访问和修改
※以'__'开头的属性为私有属性
※以'__'开头的方法为私有方法
※示例：
※-------------------------------------------------------------
※#enclosure.py
※#此示例示意私有方法/属性的用法
※class A:
※    def __init__(self):
※        self.__p1=200#私有属性
※        print('self.__p1=',self.__p1)
※    def __m(self):
※        '''此方法只能用此类的方法来调用，不能在其他地方调用'''
※        print('A.__m方法被调用')
※    def dowork(self,s):
※        '''此方法可以调用私有实例变量和实例方法'''
※        self.__m()
※        self.__p1+=s
※        print('self.__p1=',self.__p1)
※
※a=A()
※# print(a.__p1)#错误，不允许访问私有属性
※# a.__m()#无法调用
※a.dowork(200)
※class B(A):
※    '''此类示意子类不能调用父类的私有实例方法'''
※    def test(self):
※        self.__m()#出错
※        print(self.__p1)#出错
※b=B()
※b.test()#AttributeError: 'B' object has no attribute '_B__m'
※-------------------------------------------------------------
※多态polymorphic
※ 字面意思：多种状态（源于C++语言）
※ 多态是指在有继承和派生关系的类中，调用基类对象的方法，实际能调用子类的覆盖方法的现象叫多态
※状态：
※　　静态：（编译时确定的状态）
※　　动态：（运行时确定的状态）
※说明：
※　　多态调用的方法和对象相关，不与类型相关
※　　python全部对象只有‘动态’没有‘C++语言’的编译时状态（静态）
※示例：
※-------------------------------------------------------------
※#poly.py
※#此示例示意多态中的动态
※class Shape:
※    '''此类描述图形类的共有属性和方法'''
※    def draw(self):
※        print('Shape.draw被调用')
※class Point(Shape):
※    def draw(self):
※        print('Point.draw被调用')
※class Circle(Point):
※    def draw(self):
※        print('Cirle.draw被调用')
※
※def mydraw(s):
※    s.draw()#此处显示多态中的动态
※
※s1=Circle()
※s2=Point()
※mydraw(s2)
※mydraw(s1)
※#Point.draw被调用
※#Cirle.draw被调用
※-------------------------------------------------------------
※面向对象的编程语言（C++,C#,Java,Python）的特征：
※　封装
※　继承
※　多态
※-------------------------------------------------------------
※多继承multiple inheritance
※　多继承是指一个子类继承自两个或两个以上的父类（基类）
※语法：
※　class 基类(基类名1,基类名2,...):
※       ...
※说明：
※　一个子类同时继承自多个父类，父类中的方法可以同时被继承下来
※　如果两个父类中有同名的方法，而在子类中又没有覆盖此方法，调用结果难以确定　
※示例：
※multiple_inherit.py
※-------------------------------------------------------------
※#multiple_inherit.py
※#此示例示意多继承的语法
※class Car:
※    def run(self,speed):
※        print('汽车以',speed,'km/h的速度行驶')
※class Plane(Car):
※    def fly(self,height):
※        print('飞机以海拔',height,'米高度飞行')
※class PlaneCar:
※    '''PlaneCar类同时继承自汽车类和飞机类'''
※
※p1.PlaneCar()
※p1.fly(10000)
※p1,run(300)
※-------------------------------------------------------------
※多继承的问题（缺陷）：
※　标识符冲突的问题，要谨慎使用多继承
※示例：
※-------------------------------------------------------------
※#multiple_inherit.py
※#此示例示意多继承的语法
※#小李写了一个类A
※class A:
※    def m(self):
※        print('A.m被调用')
※#小张写了一个类B
※class B:
※    def m(self):
※        print('B.m被调用')
※#小王感觉小张和小李写的两个类自己都能用
※class AB(A,B):
※    pass
※# class AB(B,A):
※#     pass
※ab=AB()
※ab.m()#A.m被调用-->若继承基类方法冲突先选择继承列表靠前的类
※-------------------------------------------------------------
※多继承的MRO（method resolution order）问题
※ 类的__mro__属性
※ 　作用：
※ 　　　用来记录类的方法的查找顺序
※示例---------------------------------------------------------
※# mro.py
※class A:
※    def go(self):
※        print("A")
※class B(A):
※    def go(self):
※        print("B")
※        super().go() 
※class C(A):
※    def go(self):
※        print("C")
※class D(B, C):
※    def go(self):
※        print("D")
※        super().go()  # 调用谁?
※d = D()
※d.go()#D B C
※print(D.__mro__)#(<class '__main__.D'>, <class '__main__.B'>, <class '__main__.C'>, <class '__main__.A'>, <class 'object'>)
※--------------------------------------------------------
※函数重写 overwrite
※  什么是函数重写
※    在自定义的类内添加相应的方法,让自定义的类创建的实例能够使用内建函数进行操作
※  
※对象转字符串函数
※  repr(x) 返回一个能表示python对象的表达式字符串,通常
※     eval(repr(obj)) == obj
※  str(x)  通过给定的对象返回一个字符串(这个字符串通常供人阅读)
※
※  示例:
※    s = "I'm a teacher"
※    print(str(s))  # I'm a teacher
※    print(repr(s))  # "I'm a teacher"
※
※对象转字符串函数的重写方法:
※  repr() 函数的重写方法:
※      def __repr__(self):
※          return 字符串
※
※  str() 函数的重写方法:
※      def __str__(self):
※          return 字符串
※
※  str(obj) 函数调用方法说明:
※    1. str(obj) 函数先查找obj.__str__(方法), 调用此方法并返回结果
※    2. 如果 obj.__str__() 方法不存在.则调用obj.__repr__方法并返回结果
※    3. 如果 obj.__repr__方法不存在,则调用 object类的__repr__实例方法显示<__main__.XXXX object at 0xXXXXXXX> 格式的字符串
※  示例见:
※-----------------------------------------------------------------------------------------------------
※# mynumber.py
※
※
※# 此示例示意对象转字符串函数的重写方法
※class MyNumber:
※    def __init__(self, val):
※        self.data = val  # 在每个对象内部都创建一个实例变量来绑定数据
※
※    def __str__(self):
※        # print("__str__方法被调用")
※        return "自定义数字: %d" % self.data
※
※    def __repr__(self):
※        '''此方法返回来的字符串一定是能表示self对象的表达式字符串'''
※        return "MyNumber(%d)" % self.data
※
※n1 = MyNumber(100)
※print('str(n1) =', str(n1))  # 自定的数字:100
※print('repr(n1) =', repr(n1))  # MyNumber(100)
※
※n2 = MyNumber(200)
※print(str(n2))
※print(n2.__str__())
※print(n2)  # 在print内部会将n2用str(x) 转为字符串再写到sys.stdout
※-----------------------------------------------------------------------------------------------------
※
※
※
※
※内建函数重写
※  方法名                         函数名
※ def __abs__(self):         abs(obj)  函数调用
※ def __len__(self):         len(obj)  函数调用
※ def __reversed__(self):    reversed(obj)  函数调用
※ def __round__(self):       round(obj)  函数调用
※
※示例见:
※-----------------------------------------------------------------------------------------------------
※# len_overwrite.py
※
※
※class MyList:
※    '''这是一个自定义的列表类型,
※    此类型的对象用data属性绑定的列表来存储数据'''
※    def __init__(self, iterable=()):
※        self.data = [x for x in iterable]
※
※    def __repr__(self):
※        return 'MyList(%s)' % self.data
※
※    def __len__(self):
※        return len(self.data)
※
※    def __abs__(self):
※        L = [abs(x) for x in self.data]
※        return MyList(L)
※
※
※myl = MyList([1, -2, 3, -4])
※print(myl)  # MyList([1, -2, 3, -4])
※print(len(myl))   # 4
※print(abs(myl))   # MyList([1, 2, 3, 4])
※-----------------------------------------------------------------------------------------------------
※
※
※数值转换函数的重写:
※  def __complex__(self):     complex(obj) 函数调用
※  def __int__(self):        int(obj)
※  def __float__(self):      float(obj) 
※  def __bool__(self):       bool(obj)
※  示例见:
※-----------------------------------------------------------------------------------------------------
※# mynumber.py
※
※
※# 此示例示意数值转换函数的重写
※class MyNumber:
※    def __init__(self, val):
※        self.data = val
※
※    def __repr__(self):
※        return "MyNumber(%d)" % self.data
※
※    def __int__(self):
※        '''重写int(obj) 函数'''
※        return int(self.data)
※
※    def __float__(self):
※        return float(self.data)
※
※
※n1 = MyNumber(100)
※n = int(n1)  # 出错
※print(n)
※
※f = float(n1)
※print(f)
※
※c = complex(n1)  # 当没有n1.__complex__() 时会调用n1.__float__() + 0j
※print(c)
※-----------------------------------------------------------------------------------------------------
※
※
※布尔测试函数的重写
※  格式:
※    def __bool__(self):
※        ...
※  作用:
※    用于bool(obj) 函数取值
※    用于if语句真值表达式中
※    用于while语句的真值表达式中
※  说明:
※    1. 当自定义类内有__bool__(self) 方法时,此方法的返回作为bool(x)的返回值
※    2. 当不存在__bool__(self) 方法时,返回__len__(self) 方法的返回值是否为非零来测式布尔值
※    3. 当不存在__len__(self) 方法时,则直接返回True
※--------------------------------------------------------------
※# 此示例示意__bool__方法的重写方法及用法
※ 
※class MyList:
※    def __init__(self, iterable=()):
※        self.data = [x for x in iterable]
※ 
※    def __repr__(self):
※        return "MyList(%s)" % self.data
※ 
※    def __len__(self):
※        print("__len__被调用")
※        return len(self.data)
※    def __bool__(self):
※        '''此方法用来制定一个bool(x) 返回的规则'''
※        # 如果没有任何元素返回False
※        print("__bool__方法被调用")
※        if len(self.data) == 0:
※            return False
※        for x in self.data:
※            if x:
※                return True
※        return False
※ 
※myl = MyList([1, -2, 3, -4])
※# myl = MyList()
※print(myl)
※print(bool(myl))  # False
※print(len(myl))
※ 
※myl1 = MyList([0, 0.0, False, None])    
※print(bool(myl1))  # False
※ 
※myl2 = MyList([0, 1, 2])
※print(bool(myl2))  # True
※
※--------------------------------------------------------------------------
※对象的属性管理函数:
※  getattr(obj, name[,default])  从一个对象用字符串name得到对象的属性,getattr(x, 'y')等同于x.y;当属性不存在时,如果给定default参数则返回default,如果没有给出default 则触发一个AttributeError错误
※
※  hasattr(obj, name)  用给定的name字符串返回obj是否有此属性,此种做法可以避免在getattr(obj, name) 时引发错误
※
※  setattr(obj, name, value), 给对象obj的名为name的属性设置相应的值value, setattr(x, 'y', v) 等同于 x.y = v
※
※  delattr(obj, name) 删除对象obj中的name属性 del(x, 'y') 等同于 del x.y
※
※
※
※迭代器(高级)
※  什么是迭代器
※    由iter(x) 函数返回,可以通过next(it) 函数取值的对象就是迭代器
※
※  迭代器协议:
※    迭代器协议是指对象能够使用next()函数获取下一项数据,在没有下一项数据时触发一个StopIteration异常来终止迭代的约定
※
※  迭代器协议的实现方法:
※    def __next__(self):
※        ....
※    注:此方法需要实现迭代器协议
※
※  什么是可迭代对象
※    是指能用iter(obj) 函数返回迭代器的对象(实例)
※    可迭代对象内部要定义__iter__(self) 方法来返回迭代器对象
※
※    可迭代对象的语法形式:
※       class MyIterable:
※           def __iter__(self):
※               语句块
※               return 迭代器
※
※  示例见:
※--------------------------------------------------
※# myiterator.py
※
※
※# 此示例示意将自定义的类MyList创建的对象制作成为可迭代对象
※
※class MyList:
※    def __init__(self, iterable=()):
※        self.data = [x for x in iterable]
※
※    def __repr__(self):
※        return 'MyList(%s)' % self.data
※
※    def __iter__(self):
※        '''此方法用于返回一个能访问self对象的迭代器'''
※        print("__iter__被调用")
※        return MyListIterator(self.data)  # 创建迭代器并返回
※
※
※class MyListIterator:
※    '''此类用来描述能够访问MyList类型的对象的迭代器'''
※    def __init__(self, lst):
※        self.data_lst = lst
※        self.cur_index = 0   # 迭代器访问的起始位置
※
※    def __next__(self):
※        '''此方法用来实现迭代器协议'''
※        print('__next__方法被调用')
※        if self.cur_index >= len(self.data_lst):
※            raise StopIteration
※
※        r = self.data_lst[self.cur_index]
※        self.cur_index += 1
※        return r
※
※
※myl = MyList([2, 3, 5, 7])
※it = iter(myl)  # 等同于调用 it = myl.__iter__()
※print(next(it))  # 2
※# print(next(it))  # 3
※# print(next(it))  # 5
※# print(next(it))  # 7
※# print(next(it))  # StopIteration
※
※for x in myl:
※    print(x)
※
※L = [x**2 for x in myl]
※print(L)
※---------------------------------------------------------------------------
※# 此示例示意用自定义的类MyRange实现可迭代对象
※# 用自定义的类MyIterator 实现迭代器
※ 
※class MyIterator:
※    def __init__(self, start, stop, step):
※        # self.start变量用来记录迭代器的起始位置和当前位置
※        self.start = start
※        self.stop = stop
※        self.step = step
※    def __next__(self):
※        '''此方法用于实现迭代器协议'''
※        print("MyIterator.__next__方法被调用!")
※        if self.start >= self.stop:  # 迭失终止条件
※            raise StopIteration
※        r = self.start  # 先将要返回的数存于变量r中
※        self.start += self.step  # 迭代器后移
※        return r  # 送回给next(it) 调用
※class MyRange:
※    def __init__(self, start, stop=None, step=1):
※        if stop is None:
※            stop = start
※            start = 0
※        self.start = start  # 起始值
※        self.stop = stop    # 终止值
※        self.step = step    # 步长
※    def __repr__(self):
※        return "MyRange(%d, %d, %d)" % (self.start,
※            self.stop, self.step)
※    def __iter__(self):
※        '''此方法用于把MyRange类型创建的对象当做可迭代对象
※        '''
※        print("__iter__被调用")
※        # 此处必须返回迭代器
※        return MyIterator(self.start, self.stop, self.step)
※ 
※L = [x for x in MyRange(5, 10)]
※print(L)
※print('----------------------------')
※R = MyRange(5, 10, 2)
※it = iter(R)  # R.__iter__
※print(next(it))  # it.__next__
※------------------------------------------------------------------------------------------------
※练习:
※  写一个类MyList 实现和list内几乎一样的功能 
※    在MyList类内用列表来存储数据 
※  如:
※    class MyList:
※        def __init__(self, iterable=()):
※            self.data = [x for x in iterable]
※        def append(self, v):
※            ...用于添加数据
※----------------------------以下方法既是可迭代对象类又是迭代器类-----------------------------------------------------------------------
※class MyList:
※    def __init__(self,iterable=0):
※        self.date=[x for x in iterable]
※        self.index=0
※    def __repr__(self):
※        return 'MyList(%r)' % self.date 
※    def append(self,v):
※        return self.date.append(v)
※    def __len__(self):
※        return len(self.date)
※    def __iter__(self):
※        return MyList(self.date)
※    def __next__(self):
※        if self.index >=len(self.date):
※            raise StopIteration
※        r=self.date[self.index]
※        self.index+=1
※        return r
※----------------------------------------------------------------------------------------------------
※class MyList:
※    def __init__(self, iterable=()):
※        self.data = [x for x in iterable]
※    def append(self, v):
※        self.data.append(v)
※        # ...用于添加数据
※    def __repr__(self):
※        return 'MyList(%r)' % self.data
※ 
※    def __iter__(self):
※        return MyIterator(self.data)
※ 
※    def __len__(self):
※        return len(self.data)  # self.data.__len__()
※ 
※class MyIterator:
※    def __init__(self, lst):
※        self.data = lst  # 绑定要迭代的列表　
※        self.index = 0  # 迭代的起始位置
※ 
※    def __next__(self):
※        if self.index >= len(self.data):
※            raise StopIteration  # 发送迭代结束通知
※        r = self.data[self.index]
※        self.index += 1
※        return r  # 返回此次提供的数据
※ 
※ 
※L = MyList("ABCD")
※print(L)  # MyList(['A', 'B', 'C', 'D'])
※L.append('E')
※print(L)  # MyList(['A', 'B', 'C', 'D', 'E'])
※for x in L:
※    print(x)  # A B C D E
※print("列表L的长度是:", len(L))  # 5
※----------------------------------------------------------------------------------------------------------------------
※练习:
※  1. 实现原学生信息管理系统的Student类的封装,让除Student实例方法外的函数或其它方法都不能访问姓名,年龄,成绩等属性
※
※  2. 写一个实现迭代器协议的类,让此类可以生成从b 开始的n个素数
※    class Prime:
※        def __init__(self, b, n):
※            ...
※        def __iter__(self):
※           ....
※
※    L = [x for x in Prime(10, 4)]
※    print(L)  # L = [11, 13, 17, 19]
※-------------------------------------------------------------------------------------
※class Prime:
※    def __init__(self, b, n):
※        self.begin = b  # 开始时起始数字
※        self.count = n  # 需要创建的数据的个数
※
※    def __iter__(self):
※        self.cur_count = 0  # 表示已经生成了的素数的个数
※        return self
※
※    def __isprime(self, x):
※        '''用来判断x是否是素数'''
※        if x < 2:
※            return False
※        for i in range(2, x):
※            if x % i == 0:
※                return False
※        return True
※
※    def __next__(self):
※        # 判断已提供数据的数据个数,和要提供的数据个数来决定是否终止
※        if self.cur_count >= self.count:
※            raise StopIteration
※        while True:
※            if self.__isprime(self.begin):
※                # 得到下一个素数
※                r = self.begin
※                # 然后把self.begin 加1
※                self.begin += 1
※                # 已生成个数要加1
※                self.cur_count += 1
※                # 返回当前的素数
※                return r
※            self.begin += 1  # 准备判断下一个数是否为素数
※-------------------------------------------------------------------------------------------------------------------
※
※  3. 写一个类Fibonacci实现迭代器协议,此类的对象可以作为可迭代对象生成斐波那契数列
※         1 1 2 3 5 8 13 ....
※    class Fibonacci:
※        def __init__(self, n):
※            ...
※        ...
※    for x in Fibonacci(10):
※        print(x)  # 打印 1 1 2 3 5 8 ...
※---------------------------------------------------------------------------------------
※class Fibonacci:
※    def __init__(self,n):
※        self.n=n
※        self.date=self.fn()
※    def fn(self):
※        lst=[1,1]
※        while len(lst)<=self.n:
※            lst.append(lst[-1]+lst[-2])
※        return lst
※    def __repr__(self):
※        return 'Fibonacci(%d)' % self.n
※    def __iter__(self):
※        return MyIterator(self.date)
※class MyIterator:
※    def __init__(self,lst):
※        self.date=lst
※        self.index=0
※    def __next__(self):
※        if self.index>=len(self.date):
※            raise StopIteration
※        r=self.date[self.index]
※        self.index+=1
※        return r
※for x in Fibonacci(10):
※    print(x,end=' ')
※---------------------------------------------------------------------------------------
※