第一周周总结：
一、linux文件操作命令
1.三大操作系统：windows、linux、unix
2.计算机组成：硬件（处理器CPU）、运行内存RAM、主板、输入输出设备、软件
3.软件包括：操作系统、驱动程序、应用程序
4.linux命令格式：　命令名　[选项]　[参数]
 主要命令：
 (01)pwd该命令用于显示当前工作文件夹目录
 (02)ls该命令用于显示指定目录的文件或文件夹信息-->ls [选项] [文件／文件夹名]]
     常用选项：
     -l列表显示文件的详细信息
     -a显示全部文件夹／文件（包含.开头的）
     --help显示命令使用及命令选项使用的帮助信息-->ls --help
 (03)cd该命令用于改变当前的工作路径-->cd[目录名]
      示例：
           cd /home
           cd /
           cd     #默认不写目录名相当于　cd ~
           cd ..  #去上一级目录
           cd ~   #返回用户主目录
 (04)mkdir该命令用于创建一个文件夹或多个文件夹-->mkdir 文件夹名1　文件夹名2
      常用选项：
      -p如果是中间文件夹不存在，则创建所有中间文件夹的
 (05)rmdir该命令用于删除一个或多个空的文件夹-->rmdir 文件夹名１　文件夹名２　...
 (06)touch该命令用于创建文件(当目录下无该文件名)或更新文件的修改时间(当目录下该文件名已存在)
      示例：
      touch a.txt
      touch b.txt c.txt
 (07)rm该命令用于删除文件或文件夹
     常用选项：
     －r递归删除文件夹内部的文件夹和文件
     －i删除前给出提示（y代表yes,n代表no）
     －f强制删除，不给提示
 (08)man该命令用于显示命令的帮助信息(退出键q)-->man linux/Unix命令-->man ls-->man man
 (09)cp该命令用于复制文件或文件夹-->cp [选项]　源文件或文件夹名　目标文件或文件夹名
     示例：
     cp day01.txt ~/桌面/
     cp day01.txt ~/day01bak.txt
 (10)mv该命令用于文件移动位置或更名-->mv　源文件或文件夹名　目标文件
 (11)find该命令用于根据文件目录查找该目录下有哪些文件-->find 文件目录
 (12)grep该命令用于查找文件中相应的内容，及文本信息-->grep "内容"　[选项]　文件名或路径
     常用选项：
     -n 显示行号(必须具体到文件名)
     -r 显示目录
 (13)gzip该命令用于用zip压缩算法对文件进行压缩，生成压缩后的文件后缀名通常用　.gz结尾--＞gzip 文件名
 (14)gunzip该命令用于对用gzip压缩算法压缩的.gz格式的数据进行解压缩
     示例：
     gzip day01.txt
     gunzip day01.txt.gz
 (15)tar该命令用于对文件夹或文件进行打包和解包操作-->tar [选项]　打包后的文件名或路径1　打包前的文件名或路径2
     常用选项：
     -c创建包
     -x解包
     -f文件名即操作的文件
     -v显示操作的文件细节
     -z用gzip/gunzip对包进行压缩和解压缩
     示例：
     tar -czvf ~/day01.tar.gz ~/day01  #把day01文件打包为day01.tar.gz(注意先写打包后的文件名，紧接着跟要打包的文件)
     tar -xzvf ~/day01.tar.gz　　     #解包到当前目录
 (16)sudo该命令用于用超级用户root权限来执行这个命令-->sudo [选项] [参数]
     常用选项：
     -i切换到root用户
     如：
     sudo -i#进入root用户模式
5.linux路径：绝对路径、相对路径
 ①绝对路径：以‘／’字符开头的路径为绝对路径
 ②相对路径：不以‘／’开头的路径为相对路径
     相对路径开始符号有：
       文件／文件夹名
       ．当前文件夹
       ．．上一级文件夹
       ～　用户主目录
二、python语言介绍
1.创始人：guido－van－rossum;创建时间：1989(java语言通用性较强，第一大编程语言)　排名：java.C.C+.python
2.python应用领域
　系统运维（银行的存储系统，账单计算、数据备份自动化管理）
　网络编程（联通工具、网盘）
　科学计算
　人工智能，机器人（集成了大量人工智能库）
　web开发（网站开发：知乎）
　云计算
　大数据及数据库编程
　教育（全国计算机二级考试内容C\JAVA\C++\PHP\PYTHON－２月份报名／６月份开考）
　游戏，图像等  
3.python的优缺点
　优点：
　　面向对象（java,C++,python,c#,swift）面向对象是一种开发思想
   免费
   可移植（windows/linux/unix）
   可混合编程(C/C++/JAVA/.NET)（缺点避开：涉及效率、加密模块可用C++写，用python调用）
　　简单易学易用
　　开发效率高
　　应用领域广泛
　　开源
　缺点：
　　与c/c++相比，执行速度不够快
　　不能封闭源代码
　编译型语言：C/C++　CPU能够直接执行的语言
　解释执行语言：java/python 
4.python的运行
python的解释执行器的类型
CPython(C语言开发)
Jyphon(Java开发))
IronPython(.net开发)运行在windows
执行程序：
①在终端内执行（标准执行、最终运行程序）：
  $python3 文件路径名．py
  Python文件的后缀:
 ．py　　　　　　　　　　　　　　　　　python语言的后缀
 ．c（小写） 　　　　　　　　　　　　　C语言的后缀
 ．cpp/.cxx/.cc/.C（大写）  　　　　c++语言后缀
 ．java                　　　　　　java语言的后缀
②在python的交互模式(说一句，答一句)下编写并执行代码
进入交互模式:
  $python3　<回车>
退出交互模式：
  >>>quit() <回车>
  >>>exit() <回车>
  >>><输入ctrl+d>
5.python的注释：以#开头直至行尾,让注释内容不参加解释执行(vx code快捷键：ctrl+/)
6.python程序的组成：
　程序由模块组成
　模块由语句，函数，类组成
　语句包含表达式
　表达式建立并创建数据对象
三、python数据类型
1.整型数int
整型数的字面值的表示方式：
　>十进制表示
　如：
     -10
     200
     99999999
　>八进制方式表示（0o开头，后跟0~7）
　如：  
     0o八进制数字 #（输出十进制数字）
     0o177      #(127) 
     0o11       #(9)
　>十六进制方式表示（0x开头，后跟0~9,A~F,a~f）
　如：
     0x11       #(17)
     0xFF       #(255)
     0x1a2b3c4d #(439041101)
　>二进制(数字电路决定)方式表示(0b开头，后跟0~1)
　如：
     0b0000     # (0)
     0b0001     # (1)
     0b0010     # (2)
     0b01001000 # (72)
2.浮点型数float:浮点数是带着小数部分的数字（小数部分可以为0）

浮点数字面值表示方式：
　小数表示如：3.14   3.1   3.   0.14   .14
　科学计数法-->小数e/E　正负号　指数
   如：
   　　6.18E-1   #等同于０．６１８
   　　2.9979e8  #等同于299790000.0
3.复数complex的表示方式：分为两部分：实部（real）和虚部（image）
　如：
　1j
　1+2j
　-2j
　（-100+200j）
　注：虚部以J或j结尾的数
4.布尔型数bool:用来表示真和假两种状态的类型
　　true表示真（条件满足或成立）
　　false表示假（条件不满足或不成立）
　说明：
　　true的值为1
　　false的值为0
5.空值None:None是一个表示不存在的特殊对象;用来占位和变量解除;
四、比较运算符
 Python运算符优先级
     优先级　　运算符 	                               　     描述	
     01　　　　(), [], {key: value}, {} 	                    元组表达式、列表表达式、字典表达式、集合表达式
     02　　　　x[index], x[index:index]                              
     　　　 　 x(arguments...), x.attribute                  索引，切片,函数调用，属性引用　　　　
     03　　　　** 	                                        指数 (最高优先级)
     04　　　　~, +, - 	                                    按位翻转, 正号,负号
     05　　　　*, /, %, // 	                                乘，除，取模和地板除
     06　　　　+, - 	                                        加法, 减法
     07　　　　>>, << 	                                    右移, 左移运算符
     08　　　　& 	                                        位与(AND)
     09　　　　^ 	                                        位异或(XOR)
     10　　　　| 	                                        位或(OR)
     11　　　　<=, <, >, >=, ==, !=,
       　　　　is, is not, in, not in 	                    比较,身份测试,成员资格测试
     12　　　　not 	                                        布尔非
     13　　　　and 	                                        布尔与
     14　　　　or 	                                        布尔或
     15　　　　if - else 	                                条件表达式
     16　　　　lambda 	                                    lambda表达式
五、函数调用说明：函数调用是表达式，一定会返回一个对象的引用关系（或者返回None）
函数名（调用传参列表）
 1.数学对象的构造函数（构造函数也叫创建函数）
  >float(obj)用字符串或数字转换为浮点数，如果不给出参数，则返回0
  >int(x=0)用数字或字符串转换为整数，如果不给出参数，则返回0
    int(x,base=10)         
    int("100",10)＃int("进制数",10进制) （最高32进制,前进制数表示必须符合后面给定的几进制，输出为10进制数）
  >complex(r=0.0,i=0.0)用数字创建一个复数，实部为r，虚部为i
  >bool(x)用x创建一个布尔值(True/Flase)
    bool(x)返回假值的情况：
    　·None　空值
    　·Flase 布尔假值
    　·0  0.0  0j 所有的数字0
    　''空字符串
    　()空元组
    　[]空列表
    　{}空字典
 2.预置（内建）的数值型函数
  >abs(x)　取x的绝对值
  >round(number,[ndigits]) 对数值进行四舍五入，ndigits是小数向右保留的位数，负数表示向左取整　
   round(12345.678) #输出12346
  >pow(x,y,z=None) #x**y或x**y%z                                               
   pow(2,4,5)     　#输出１，相当于２^4%5=1
 3.>>>help(函数名/字符串/类名/变量..)　
   帮助函数，通常在交互模式下使用；可以查询函数使用规则
 4.基本输入输出函数
  >input基本输入函数
  >print基本输出函数-->print(value,...,sep='',end='\n',file=sys,stdout,flush=False)
    关键字参数：
    sep 两个值之前的分隔符，默认为一个空格‘’
    end 输出完毕后在字符流末尾自动追加一个字符串，默认为换行符'\n'
    file:文件流对象，默认为(sys.stdout)
    flush:是否立即进行输出
 5.python3中常用的序列函数
  >len(x) 返回序列的长度
  >max(x) 返回序列的最大值元素
  >min(x) 返回序列的最小值元素
 6.字符的编码转换函数
  >ord(c) 返回一个字符c的Unicode编码值
  >chr(i) 返回i这个值所对应的字符
    示例：
    c=ord('A')
    print(c)      #65
    ch=chr(c)     #ch='A'
    print(ch)     # A
 7.整数转字符串函数：
  >bin(i) 将整数转为二进制字符串
  >oct(i) 将整数转为八进制字符串
  >hex(i) 将整数转为16进制字符串
  >str(i) 将整数转为10进制字符串
 8.字符串的构造函数
  >str(obj='') 将对象转换为字符串
 9.range()函数
  >range() 函数:用来创建一个生成一系列整数的可迭代对象（也叫整数序列生成器）,此对象可用于for语句来进行迭代取出其中的对象
    函数　　　　　　　　　　    　　说明
    range(stop)      　　　　　　用来生成0~stop之间内的整数，直到stop为止(不包含stop)
    range(start,stop[,step])   用来生成start~stop之间的整数，直到stop为止(不包含stop)，每个整数间间隔step，且step可以为负数
    示例1：
     range(4)         #生成 0 1 2 3
     range(3,6)       #生成 3 4 5
     range(1,10,2)    #生成 1 3 5 7 9
     range(5,0,-2)    #生成 5 3 1
    示例2：
     for x in range(4):
         print(x) # 0 1 2 3
 10.列表的构造（创建）函数list():生成一个空的列表　等同于[]
  >list(iterable) #用可迭代对象创建一个列表
    示例：　
       L=list() #L绑定空列表
       L=list("hello") #L绑定['h','e','l','l','o']
       L=list(range(7,10)) #L＝[7,8,9]
 11.id(x)函数
  >id(x):返回一个对象在内存中的地址
　如：
　　a=10000
　　b=10000
　　print(id(a))
　　print(id(b))
　　print(id(a is b))
六、序列
1.字符串str：用来记录文本信息，在内存中具有一定顺序的编码；在非注释中，凡是用引号括起来的部分都是字符串
三引号字符串中的换行会自动转换为换行符'\n'
>用转义序列代表特殊字符
　字符串字面值中用字符反斜杠（\）后跟一些字符代表一个字符
　　转义字符　　　含义
　　\' 　　　　代表一个单引号
　　\" 　　　　代表一个双引号
　　\\ 　　　　一个反斜杠
　　\n 　　　　代表一个换行符－－－－－－－－－－－－－－－－－－－以下（包括本行）为控制字符，不显示
　　\r 　　　　返回当标至行首字符            print("ABCD\rab") # 得到abCD
　　\t　　　　　水平制表符                  print("ABCD\trab") # 得到ABCD    rab　
　　\v 　　　　垂直制表符
　　\b　　　　　倒退字符 backspace          print("ABCD\brab") #得到ABCrab
　　\f　　　　　换页
　　\0　　　　　空字符（字符值为零）　　等同于\x00
　　\0oo 　　　oo为两位八进制表示的字符
　　\xXX 　　　XX为两位十六进制的字符
　　\uXXXX 　　XXXX为四位十六进制表示的Unicode16字符
　　\UXXXXXXXX 　Unicode32的十六进制表示的字符

>ACSII　编码
　　$ man ascii #　查看所有英文字符的编码－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
常用的ascii编码：
　　字符　　　　十进制　　　十六进制
　　'0'       48         0x30                               输入(print(\x41))　　＃　Ａ
　　'A'       65         0x41
　　'a'       97         0x61
　　' '       32         0x20
>raw字符串（原始字符串）
　格式：
　　r'字符串内容’
　　r"字符串内容"
　　r'''字符串内容'''
　　r"""字符串内容"""
　作用：让转义字符\无效
示例：
  s1='C:\newfile\test.py'
  print(s1)
  s2=r'C:\newfile\test.py'
  print(s2)

>字符串的拼接、重复、比较运算（＋、＊）
>字符串的索引运算　index
 Python　字符串是不可以改变的字符序列
　语法：
　　字符串[整数表达式]
　说明：
　　１．python序列都可以用索引（index）来访问序列中的对象
　　２．python序列正向索引是从0开始的，第二个索引为1，...,最后一个索引为les(s)-1
　　３．python序列的反向索引是从-1开始的，-1代表最后一个，-2代表倒数第二个，...,第一个是-les(s)
　示例：
　　s='ABCDE'
   print(s[1]) #B 
   print(s[4]) #E
   print(s[-1]) #E

>字符串的切片操作　slice
 从字符串序列中取出相应的元素，重新组成一个新的字符串序列
 语法：
 　字符串[(开始索引b):(结束索引e):(:(步长s))]
   注：小括号括起来的部分可以省略
 说明：
   1.开始索引是切片开始切下的位置，0代表第一个元素...，-1代表最后一个索引（与索引规则相同）
   2.结束索引是切片的终止索引（但不包括终止点）
   3.步长是切片每次获取完当前元素向后移动的方向和偏移量
    1)没有步长，默认步长为1
    2)当步长为正数时，取正向切片，开始索引默认为0，结束索引默认为最后一个元素的下一个位置
    3)当步长为负数时，取反向切片，默认起始位置为最后一个元素，终止位置是第一个元素的前一个位置
----------------------------------------------------------------------------------------------------------------
>常用字符串方法:
      方法	                                 说明
   S.isdigit()	                          判断字符串中的字符是否全为数字
   S.isalpha()	                          判断字符串是否全为英文字母
   S.islower()	                          判断字符串所有字符是否全为小写英文字母
   S.isupper()	                          判断字符串所有字符是否全为大写英文字母
   S.isspace()	                          判断字符串是否全为空白字符
   S.center(width[,fill])	              将原字符串居中，左右默认填充空格
   S.count(sub[, start[,end]])	          获取一个字符串中子串的个数
   S.find(sub[, start[,end]])	          获取字符串中子串sub的索引,失败返回-1
   S.strip()	                            返回去掉左右空白字符的字符串
   S.lstrip()	                          返回去掉左侧空白字符的字符串
   S.rstrip()	                          返回去掉右侧空白字符的字符串
   S.upper()	                            生成将英文转换为大写的字符串
   S.lower()	                            生成将英文转换为小写的字符串
   S.replace(old, new[, count])          将原字符串的old用new代替，生成一个新的字符串
   S.startswith(prefix[, start[, end]])  返回S是否是以prefix开头，如果以prefix开头返回True,否则返回False,
   S.endswith(suffix[, start[, end]])    返回S是否是以suffix结尾，如果以suffix结尾返回True,否则返回False
以下是不常用的	 
   S.title()	生成每个英文单词的首字母大写字符串
   S.isnumeric()	判断字符串是否全为数字字符
   >>> help(str)      交互模式下查找字符串使用方法的规则
空白字符:是指空格,水平制表符(\t),换行符(\n)等不可见的字符
----------------------------------------------------------------------------------------------------------------
>字符串的格式化表达式：生成一定格式的字符串
　运算符： %
　语法格式：
　　格式字符串　%　参数值
　　格式字符串　%  （参数值1，参数值2,...）
　说明：
　　格式字符串以%开头的字符为占位符，占位符的位置将用参数值替代
　示例：
    fmt="姓名: %s,年龄:　%d"
    name=input("请输入姓名:")
    age=input("请输入年龄:")
    s=fmt % (name,age)
    print(s)
--------------------------------------------
>格式化字符串中的占位符和类型码：
%s           使用str(x)函数转换
%r           使用repr(x)函数转换
%c           整数转为单个字符#chr(x)
%d           整数转为10进制整数
%o           数转为8进制整数
%x           数转为16进制整数(字符a~f小写)
%X           数转为10进制整数(字符A~F大写)
%e           指整形浮点数(e小写)　如　2.9e10
%E           指整形浮点数(E大写)　如　2.9E10
%f,%F        浮点数10进制形式(默认保留６位)
%g,%G        10进制形式或指数形式浮点数自动转换
%%           等同于一个%
--------------------------------------------
>占位符和类型码之间的格式化语法：
　格式：　
　　% - + 0 宽度.精度 类型码
　说明：
　　－　左对齐（默认为右对齐）
　　+　显示正号
　　0　左侧空白位置补零
　　宽度：整个数据输出的宽度
　　精度：保留小数点后多少位（默认6位）(仅限在浮点数起作用)
　示例：
   "%10d" % 123   #'       123'             (左面补７个空格字符、默认右对齐)
   "%-10d" % 123  #'123       '　　　　　　　　（右面补７个空格字符，左对齐）　　　　　
   "%10s" % 'abc' #'       abc'
   "%-5s" % 'abc' #'abc  '
   "%-010d" % 123  #'123'
   "%.2f" % 12.34567890 #'12.35'
   "%7.2f" % 12.34567890 #'  12.35'
2.python3中序列的类型（sequence）
字符串　 　  str 
列表        list
元祖        tuple
字节串     　bytes
字符数组     bytearray
3.列表　list:列表是一种容器,列表是可以改变的序列,列表由一系列元素组成，元素与元素之间可能没有任何的关联关系，但他们之间有先后顺序
>创建空列表的字面值:
　[]       # 创建空列表的表达式
>创建非空列表的字面值:
　L=[1,2,3,4]　
　L=['北京','上海','深圳']
　L=[1,'Two',3.14,'四']
　L=[1,2,[3.1,3.2],4]
>列表的运算：
　算数运算：
  +   +=   *   *=
-------------------------------------------------
  “+”   用于拼接列表　
  lx=[1,2,3]
  ly=[4,5,6]
  lz=lx+ly           # lz=[1,2,3,4,5,6]
-------------------------------------------------
  “+=”  用原列表与右侧列表拼接，再用变量绑定列表
  　　语法：
  　　L+=可迭代对象
  　　示例：　
  　　 L=[1,2,3]
      id(L)        # 1406.....4
　 　  L+=[4,5,6]　 #L=[1,2,3,4,5,6]
      id(L)        # 1406......4
      内存位置id(L)不变，相当于把[4,5,6]扩入到原先的位置的内存中：对应了“列表是可以被改变的序列”

      L=L+[4,5,6]
      此时id(L)已变化，相当于绑定一个新的列表
---------------------------------------------------      
　“*”   用于生成重复的列表
     x=[1,2]*3    # x=[1,2,1,2,1,2]
---------------------------------------------------
　“*=”  用原列表生成重复列表，并用变量绑定生成的列表
　　　x=[1,2]
     x*=3         # x=[1,2,1,2,1,2]
------------------------------------------------------
>列表的比较：
　运算符：
　　< <= > >= == !=
　说明：
　　列表的比较规则与字符串的比较规则相同
　　列表要求每两个元素能依次进行比较，否则会出现类型错误
　示例：　
　　x=[1,2,3]
　　y=[1,3,2]
　　x<y #True
　　x>y #False
　　[1,'Two']>['Two',1] #TypeError
　　[1,'Two',3.14]<[1,'二',5.6] #True 
>列表的索引赋值操作：列表是可变的序列，可以通过索引赋值改变列表中的元素-->列表[整数表达式]=表达式
 示例：
     x=[1,'二',3,'Four']
     x[1]=2                    #将列表的第二个元素改为2
     x[-1]=4
     print(x)                   #[1,2,3,4]
>列表的切片操作-->列表[(开始索引):(结束索引e)(:(步长s))]
 说明：
     列表切片取值返回一个列表，规则等同于字符串规则
 示例：
x=[0,1,2,3,4,5,6,7,8]
y=x[1:9:2]   #奇数
>列表切片的赋值操作：可以改变原列表的排序，可以插入和修改数据,可以用切片改变列表对应的元素的值-->列表[切片]=可迭代对象
　注：赋值运算符的右侧必须是一个可迭代对象
　示例：　
    L=[2.2,3.3,4.4]
    L[0:1]=[1,2]   # L=[1,2,3.3,4.4]　
    L=[2:]=[3,4,5] # L=[1,2,3,4,5]
    L[:]=[30,40]   # L=[30,40]
    L[0:0]=[10,20] # L=[10,20,30,40]
    L=[3,4]
    L[1:1]=[3.1,3.2] # L=[3,3.1,3.2,4]
    L=[3,4]
    L[1:1]="AB"    # L=[3,'A','B',4]
>列表切片注意事项：
　对于步长不等于1的切片赋值。赋值运算符的右侧的可迭代对象提供的元素个数一定要等于切片切出的段数
　如：
　　L=[1,2,3,4,5,6]
　　L[::2]="ABC" 　　#对的
　　L[::2]="ABCD"　　#错的
七、变量：变量是关联一个对象的标识符，变量可以绑定一个对象，并可能通过变量名来使用这个对象
标识符的命名方法：
　·标识符必须为字母或下划线开头，后跟字母或下划线或数字
　·不能使用python的关键字作为变量名（eg:True\Flase\None\is\del\if\while\for ...）
　·变量名区分大小写
　·合法变量名示例：
　　a a1 a100 bbbbb hello _abc var A1B2
　·不合法的变量名：
　　1a 123 $abc +a #abc true 
八、语句:语句是python执行的最小单位,由一些表达式组成，通常一条语句可以独立执行来完成一部分事情并形成结果,一条语句建议写在一行内;多条语句写在一行需要用分号“；”分开
　　eg:
       print("hello")
       x=100+200
       #写在一起为
       print("hello");x=100+200

※语句的显示换行
　eg:
　　statement_newline.py
　　折行符\(读作：反斜杠)
　　折行符必须放在一行的末尾，来示意解释执行器，下一行也是本行的语句
※语句的隐式换行
　括号：()  []  {}
1.赋值语句-->变量名＝表达式or-->变量名1＝变量名2=变量名3=表达式or-->变量名1,变量名2,...=数值1,数值2,...
　作用：
　　创建一个变量或修改一个变量绑定的数据
　说明：
　　1.当变量不存在时，创建该变量，同时将变量绑定在表达式或返回的对象上
　　2.当变量存在时，改变此变量绑定的对象
　　3.一个变量只能绑定一个对象
　　4.两个变量可以同时绑定在一个对象上
　eg:
　　pi=3.1415926
　　a=10
　　b=a #a和b　同时绑定在一个10上
　　a,b=b,a #a,b变量绑定对象互换
　序列赋值的语法：
　　变量名1,变量名2,．．．=对象1,对象２,....
　　变量名1,变量名2,．．．=[对象1,对象２,....]
　　变量名1,变量名2,．．．=(对象1,对象２,....)
2.del语句:用于删除变量，同时解除与对象的关联关系，如果可能则释放对象-->del　变量1,变量2, ....
3.if语句:让程序根据条件选择性的执行某条语句或某些语句
-->语法：
    if   真值表达式1:                                          注：if 后面仅跟表达式！
         语句块1
    elif 真值表达式2：
         语句块2
    elif 真值表达式3
         语句块3
    ...
    else:
         语句块4
说明：
    elif 子句可以有0个，1个或多个
    else 子句可以有0个，1个，且只能放在此if语句的最后
-->if语句真值表达式：
if 100:
    print("是真值")
等同于：
if bool(100):
    print("是真值")
-->if 语句的嵌套
  if 语句本身是由多条语句组成的一条复合语句，if 语句可以作为语句嵌套到另一个语句的内部
-->条件表达式：
语法：
           表达式1 if真值表达式 else 表达式2
作用：
          根据真值表达式的取值（True/Flase）来决定执行表达式1或表达式2并返回结果
4.pass语句:通常用来填充语法空白,又名空语句
5.while语句：根据一定条件，重复的执行一条语句或多条语句
　>语法：　
　　while　布尔表达式：
　　    语句块1（*此部分的语句可能会重复执行）
　　else:
　　    语句块2
　>说明：
　　else 子句可以省略（同if类似）
　执行步骤：
　1.先执行真值表达式，测试布尔值是否为True或False
　2.如果真值表达式测试值为True，则执行语句1，然后再回到第一步
　3.如果真值表达式测试值为Fasle,则执行else子句中的语句2，然后结束此段while语句。如果没有else语句，则直接结束此while语句的执行
  >while语句的注意事项：
　１．控制循环的真值表达式来防止死循环
　２．通常在循环语句块内改变循环变量来控制循环次数和变量的走向
  >while语句的嵌套：
　while语句本身也是语句，和其他语句一样，可以嵌套到任何复合语句中
　示意：
　　while 真值表达式:
　　     ...
　　     while 真值表达式:
　　　　    ...
        else:
           ...
        ...
    else:
        ....
6.break语句:用于循环语句（while,for语句）中，用来终止当前语句的执行
　说明：
　　１．当break执行后，此循环语句内break之后的语句将不再执行
　　２．break通常和if语句组合使用
　　３．break终止循环时，循环语句的else子句将不会被执行
　　４．break语句只能终止当前循环语句的执行，如果有循环嵌套时，不会跳出外重循环
  死循环
　  死循环是指条件一直成立的循环                 while True
　  死循环通常用break语句来终止循环
　  死循环的else子句永远不会执行
　  死循环通常用在循环次数不确定的循环中
　  示例：
　  　while True:
         n=int(input("请输入整数："))
         if n==0:
            break语句
         print("请输入的是：",n)
7.for语句:用来遍历(经历并且只经历一次)可迭代对象的数据元素
>可迭代对象：
　字符串str
-----------------------------------（以下后面会讲）------------------
  列表list
  元祖tuple
  字典dict
  集合set
  ...
>语法：
　for 变量列表　in 可迭代对象
　　　语句块１（重复执行）
　else:
     语句块２
>说明：
　else　子句可以省略（同while相似）
　当在循环内部用break终止循环时，else子句部分的语句不会执行
>示例：
s='ABCDE'
for ch in s:
    print("ch--->",ch)　#相当于　构造一个变量　专用来遍历并　绑定　迭代对象里面的元素
else:
    print("遍历字符串",s,"结束")
>for 语句的注意事项：
 ①for语句range调用顺序：
    　示意：
    　　请问此程序打印的结果是什么？
    -------
    i=6
    for x in range(1,i):#range函数只调用１次
        #此print函数会执行5次，
        print('x=',x,'i=',i)
        i-=1
 ②for语句变量列表里的变量可能不会创建
    for x in range(1,4):
        print(x)
    else:
        print("循环结束后x的值是",x) #报错
 ③for语句中用break语句中断执行时，else语句不会执行：
    for x in range(10):
        print(x)
        if x==3:
            break　#中断循环，不执行else
    else:
        print("for语句结束")    
>for语句嵌套
    for x in "abc":
        for y in "123":
            print(x+y) #输出９次
8.continue语句:用于循环语句（while,for语句中），不再执行本次循环内continue之后的语句，重新开始一次新的循环
　说明：
　  １．在for语句中执行continue语句，将会从可迭代对象中选取下一个数据，绑定变量后开始一次新的循环
　  ２．在while语句中，执行continue语句，将会直接跳转到while语句真值表达式处，重新判断循环条件
  

    
 
 
 
 