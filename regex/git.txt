git--是--代码协同管理工具

一、代码管理工具作用：
  1.防止代码丢失，做备份
  2.代码版本的管理，可以进行多个节点的备份，在多个版本之间跳跃
  3.可以方便的将代码在多人之间进行共享传输
  4.多人开发时有各种模式可以方便代码管理

二、什么是git
  git是一个开源的分布式版本控制系统，可用于高效的管理大小项目。

三、代码管理工具系统之 分布式git 和 集中式svn
  1.分布式： 每个节点都保存完整的代码，没有明确的中央服务器，节点之间项目推送下载代码完成代码共享
  2.集中式： 代码集中管理，每次完成的代码上传到中央管理器，然后再统一从中央管理器下载代码使用

四、git特点
  1.git可以管理各种文件，特别是代码项目，多在*nix系统中使用
  2.是分布式管理，不同于集中式，这是git和svn的核心区别
  3.git可以更好的支持分支，方便多人协同工作
  4.git分布式代码更安全，有全球唯一的commit版本号
  5.git是开源的系统
  6.使用git可以脱网工作，且数据传输速度较快

五、git安装
  1.linux : 
             sudo apt-get install git
  2.windows : 
             msysgit.github.io

六、对git进行基本配置：需要进行配置的有2项：（用户）、（联系方式）
    git config--配置命令
    git配置分3个级别：  
      1. 系统中所有的用户均使用该配置
         命令 ：sudo git config  --system user.name kinpoll（配置完成后自动生成配置文件，配置操作需sudo）
         查看配置文件：cat /etc/gitconfig
      2. 当前用户的所有项目均使用该配置
         命令 ：git config  --global user.email 2682039903@qq.com  
         配置文件： ~/.gitconfig
      3. 只在当前项目使用的配置
         命令 ： git config(命令要在项目文件夹中执行)
         配置文件： project/.git/config

    配置内容：
       1. 配置用户名
          e.g.  配置用户名为Tedu
          sudo git config --system user.name Tedu
       2. 配置用户邮箱
          e.g.  配置邮箱
          git config --global user.email lvze@tedu.cn
       3. 配置编译器
          e.g.  配置编译器
          git config core.editor sublime/vscode
       4. 查看配置信息
          git config --list


七、git 基本概念

工作区 ： 通过自己的主机操作的git目录
暂存区 ： 用来记录你工作的行为，作为暂时保存
本地仓库 ： 本地用来备份同步工作区内容的区域
远程仓库 ： 其他主机的git仓库




八、git的基本操作命令

   初始化仓库
       git  init
       * 初始化仓库后产生.git目录为git的管理目录，初始化仓库的         目录中的内容即可使用git管理

   查看工作分支状态
       git status
       * 默认工作分支为master，可以通过创建新的分支切换

   文件提交到暂存区
       git  add  [file]
       * 可以一次提交多个内容，中间用空格隔开
       * 提交的内容可以使文件也可以是目录
       * 如果想将当前目录下所有内容都提交也可以使用 * 表示
   
       删除暂存区的记录
       git  rm  --cached  [file]      (如果是目录加 -r)


   将暂存区记录的修改内容同步到本地仓库
        git  commit   -m  "some message"
        * -m 为添加的附加信息
        * 当工作区和本地仓库内容一致是git status提示工作区干净

   查看提交日志
        git  log
        git  log   --pretty=oneline


   工作区操作
       查看工作区文件和本地仓库的差异
           git  diff  [file]
   
       放弃工作区文件修改
           git  checkout  --  [file]
   
       恢复本地仓库文件到工作区
           git  checkout  [file]
   
   文件的移动和删除
       删除工作区文件并提交到暂存记录
           git  rm  [file]
           
       移动工作区文件并提交到暂存记录
           git  mv  file  dir
       * rm  mv 的用法和shell命令rm mv相同，操作后直接commit同步      到本地仓库


   版本控制命令
       回到之前版本 
           git  reset  --hard  HEAD^
           * HEAD 后几个^表示回到之前的几个版本
   
       通过commit_id回到指定的版本
           git  reset  --hard  commit_id
   
       查看操作日志
           git reflog
           * 获取到操作记录后可以根据commit_id去往较新的版本
   
   
九、标签管理
    什么是标签 ： 即在当前工作位置添加快照，保存项目的版本信息                  ，一般用于项目版本的迭代

    创建标签
        git  tag  v1.0
        * 默认会在最新的commit_id处打标签

        查看标签
           git  tag  查看所有标签
           git  show  V2.0  查看某个标签的具体信息

        在某个指定commig_id处打标签
           git  tag  v0.9  [commit_id]

        回到某个标签的版本
           git reset --hard  v0.9

        删除标签
           git  tag  -d  v2.0


十、保存临时工作区

   创建临时工作区
       git stash
       * 将工作区修改内容暂时封存，恢复到最近一个“干净”状态

   查看保存的工作区
       git stash  list

   应用某个工作区
       git stash apply stash@{1}
       * 新的工作区总是为stash@{0}，老的工作区会向下排列
       应用上一个工作区，并删除之
       git  stash  pop

   删除工作区
       git  stash drop  stash@{0}  删除某一个
       git  stash clear   删除所有

作业 ： 1. 申请一个github账号
              github.com
        2. 复习http协议和前两个版本
        3. 复习并发服务器和ftp文件服务器项目

------------------------------------------------
分支管理：

什么是分支？
  分支即每个人在获取原有分支（master）代码的基础上，作为自己的工作环境，单独开发，不会影响其他分支操作，开发完成后再同意合并到主线分支

  分支管理的好处：安全，不会影响其他人工作
          问题：冲突，降低耦合度可以有效减少冲突



分支管理的一些命令操作：
一、工作区分支操作
1.查看当前分支：
       git branch
       前面带*的表示正在工作的分支

2.创建分支：
       git branch [branch name]
       创建分支之前尽量保证原分支是干净的，避免合并时产生冲突

3.切换到[某个]工作分支：
       git checkout [branch name]
    eg:
       git branch master1
       git checkout master1
       git branch #*master

4.创建新的分支并切换到该[分支]：
       git branch -b [branch name]

5.合并分支：将[某个分支]合并到当前分支
       git merge [branch name]

6.删除分支：将[某个分支]删除
       git branch -d [bracn name]
       强制删除未合并分支
       git branch -D [branch name]

二、远程仓库分支操作
在远程主机上的仓库。git时分布式的，每一台主机上的git结构基本相同，只是把其他主机上的git仓库叫做远程仓库

创建共享仓库:
1.创建目录gitrepo：
       mkdir gitrepo
2.设置仓库文件夹的属主
       chown tarena:tarena gitrepo
3.创建共享仓库aid，以.git结尾
       git init --bare aid.git 
4.设置git项目文件夹属主
       chown -R tarena:tarena aid.git

5.添加远程仓库到远程主机：origin(默认远程主机名)
       git remote add origin tarena@127.0.0.1:/home/tarena/gitrepo/aid.git
*.删除已有的远程主机：
       git remote rm origin
6.向远程主机推送分支：
       git push -u origin master
7.从远程主机获取项目：
       git clone tarena@127.0.0.1:/home/tarena/gitrepo/aid.git 
8.修改属主项目同步到远程主机时经历这几步：
       git add *
       git commit -m 'abc'
       git push
9.将远程仓库内容拉取到本地：
       git pull
       git fetch（会在本地创建新的分支，必须经过与原先分支合并融合才能得到新的修改内容）
---------------------------------------------------------------------------------------------------------

gitgub
  开源的项目社区网站，提供丰富的开源项目，也为用户提供项目管理服务
  git是github唯一指定的代码管理工具
  网址：https://github.com 
  创建新的仓库：右上角+ --》 new repository --》 填写信息
  操作github：
      1.git remote 连接远程主机
      2.通过git push 上传代码